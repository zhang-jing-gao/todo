import { h, ref, computed, onUpdated, onMounted, defineComponent } from 'vue';
import { useConfig, useTheme } from '../../_mixins';
import { avatarLight } from '../styles';
import { createKey } from '../../_utils';
import style from './styles/index.cssr';
const avatarProps = Object.assign(Object.assign({}, useTheme.props), { size: {
        type: [String, Number],
        default: 'medium'
    }, src: String, circle: {
        type: Boolean,
        default: false
    }, round: {
        type: Boolean,
        default: false
    }, color: String });
export default defineComponent({
    name: 'Avatar',
    props: avatarProps,
    setup(props) {
        const { mergedClsPrefixRef } = useConfig(props);
        let memoedTextHtml = null;
        const textRef = ref(null);
        const selfRef = ref(null);
        const adjustText = () => {
            const { value: textEl } = textRef;
            if (textEl) {
                if (memoedTextHtml === null || memoedTextHtml !== textEl.innerHTML) {
                    memoedTextHtml = textEl.innerHTML;
                    const { value: selfEl } = selfRef;
                    if (selfEl) {
                        const { offsetWidth: elWidth, offsetHeight: elHeight } = selfEl;
                        const { offsetWidth: textWidth, offsetHeight: textHeight } = textEl;
                        const radix = 0.9;
                        const ratio = Math.min((elWidth / textWidth) * radix, (elHeight / textHeight) * radix, 1);
                        textEl.style.transform = `translateX(-50%) translateY(-50%) scale(${ratio})`;
                    }
                }
            }
        };
        // Not Good Impl
        onMounted(() => adjustText());
        onUpdated(() => {
            adjustText();
        });
        const themeRef = useTheme('Avatar', 'Avatar', style, avatarLight, props, mergedClsPrefixRef);
        return {
            textRef,
            selfRef,
            mergedClsPrefix: mergedClsPrefixRef,
            cssVars: computed(() => {
                const { size, round, circle } = props;
                const { self: { borderRadius, fontSize, color }, common: { cubicBezierEaseInOut } } = themeRef.value;
                let height;
                if (typeof size === 'number') {
                    height = `${size}px`;
                }
                else {
                    height = themeRef.value.self[createKey('height', size)];
                }
                return {
                    '--font-size': fontSize,
                    '--border-radius': round || circle ? '50%' : borderRadius,
                    '--color': color,
                    '--bezier': cubicBezierEaseInOut,
                    '--size': height
                };
            })
        };
    },
    render() {
        const { $slots, src, mergedClsPrefix } = this;
        return (h("span", { ref: "selfRef", class: `${mergedClsPrefix}-avatar`, style: this.cssVars }, !$slots.default && src ? (h("img", { src: src })) : (h("span", { ref: "textRef", class: `${mergedClsPrefix}-avatar__text`, style: { background: this.color } }, $slots))));
    }
});
