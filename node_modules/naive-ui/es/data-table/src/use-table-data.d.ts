import { ComputedRef } from 'vue';
import type { DataTableSetupProps } from './DataTable';
import { ColumnKey, FilterState, SortOrder, SortState, TableBaseColumn, TableSelectionColumn, InternalRowData, TmNode, TableExpandColumn, RowKey } from './interface';
import { PaginationProps } from '../../pagination/src/Pagination';
export declare function useTableData(props: DataTableSetupProps, { dataRelatedColsRef }: {
    dataRelatedColsRef: ComputedRef<Array<TableSelectionColumn | TableBaseColumn | TableExpandColumn>>;
}): {
    treeMateRef: ComputedRef<import("treemate").TreeMate<InternalRowData, InternalRowData, InternalRowData>>;
    mergedCurrentPageRef: ComputedRef<number>;
    mergedPaginationRef: ComputedRef<PaginationProps>;
    paginatedDataRef: ComputedRef<TmNode[]>;
    rawPaginatedDataRef: ComputedRef<InternalRowData[]>;
    mergedFilterStateRef: ComputedRef<FilterState>;
    mergedSortStateRef: ComputedRef<SortState | null>;
    hoverKeyRef: import("vue").Ref<RowKey | null>;
    selectionColumnRef: ComputedRef<TableSelectionColumn<InternalRowData> | null>;
    firstContentfulColIndexRef: ComputedRef<number>;
    doUpdateFilters: (filters: FilterState, sourceColumn?: TableBaseColumn<InternalRowData> | undefined) => void;
    doUpdateSorter: (sortState: SortState | null) => void;
    doUpdatePageSize: (pageSize: number) => void;
    doUpdatePage: (page: number) => void;
    filter: (filters: FilterState | null) => void;
    filters: (filters: FilterState | null) => void;
    clearFilter: () => void;
    clearFilters: () => void;
    page: (page: number) => void;
    sort: (columnKey: ColumnKey, order?: SortOrder) => void;
};
