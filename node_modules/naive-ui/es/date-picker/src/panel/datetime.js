import { h, defineComponent, renderSlot } from 'vue';
import { NButton } from '../../../button';
import { NTimePicker } from '../../../time-picker';
import { NInput } from '../../../input';
import { BackwardIcon, FastBackwardIcon, ForwardIcon, FastForwardIcon } from '../../../_internal/icons';
import { NBaseFocusDetector } from '../../../_internal';
import { useCalendar } from './use-calendar';
/**
 * DateTime Panel
 * Update picker value on:
 * 1. confirm click
 * 2. clear click
 */
export default defineComponent({
    name: 'DateTimePanel',
    props: useCalendar.props,
    setup(props) {
        return useCalendar(props, 'datetime');
    },
    render() {
        var _a;
        const { mergedClsPrefix, mergedTheme } = this;
        return (h("div", { ref: "selfRef", tabindex: 0, class: `${mergedClsPrefix}-date-panel ${mergedClsPrefix}-date-panel--datetime`, onKeydown: this.handlePanelKeyDown, onFocus: this.handlePanelFocus },
            h("div", { class: `${mergedClsPrefix}-date-panel-header` },
                h(NInput, { value: this.dateInputValue, theme: mergedTheme.peers.Input, themeOverrides: mergedTheme.peerOverrides.Input, stateful: false, size: this.timePickerSize, class: `${mergedClsPrefix}-date-panel-date-input`, textDecoration: this.isDateInvalid ? 'line-through' : '', placeholder: this.locale.selectDate, onBlur: this.handleDateInputBlur, onUpdateValue: this.handleDateInput }),
                h(NTimePicker, { showIcon: false, format: this.timeFormat, stateful: false, theme: mergedTheme.peers.TimePicker, themeOverrides: mergedTheme.peerOverrides.TimePicker, to: false, size: this.timePickerSize, value: Array.isArray(this.value) ? null : this.value, placeholder: this.locale.selectTime, isHourDisabled: this.isHourDisabled, isMinuteDisabled: this.isMinuteDisabled, isSecondDisabled: this.isSecondDisabled, onUpdateValue: this.handleTimePickerChange })),
            h("div", { class: `${mergedClsPrefix}-date-panel-calendar` },
                h("div", { class: `${mergedClsPrefix}-date-panel-month` },
                    h("div", { class: `${mergedClsPrefix}-date-panel-month__fast-prev`, onClick: this.prevYear },
                        h(FastBackwardIcon, null)),
                    h("div", { class: `${mergedClsPrefix}-date-panel-month__prev`, onClick: this.prevMonth },
                        h(BackwardIcon, null)),
                    h("div", { class: `${mergedClsPrefix}-date-panel-month__month-year` }, this.locale.monthBeforeYear
                        ? `${this.calendarMonth} ${this.calendarYear}`
                        : `${this.calendarYear} ${this.calendarMonth}`),
                    h("div", { class: `${mergedClsPrefix}-date-panel-month__next`, onClick: this.nextMonth },
                        h(ForwardIcon, null)),
                    h("div", { class: `${mergedClsPrefix}-date-panel-month__fast-next`, onClick: this.nextYear },
                        h(FastForwardIcon, null))),
                h("div", { class: `${mergedClsPrefix}-date-panel-weekdays` }, this.weekdays.map((weekday) => (h("div", { key: weekday, class: `${mergedClsPrefix}-date-panel-weekdays__day` }, weekday)))),
                h("div", { class: `${mergedClsPrefix}-date-panel-dates` }, this.dateArray.map((dateItem, i) => (h("div", { "data-n-date": true, key: i, class: [
                        `${mergedClsPrefix}-date-panel-date`,
                        {
                            [`${mergedClsPrefix}-date-panel-date--current`]: dateItem.isCurrentDate,
                            [`${mergedClsPrefix}-date-panel-date--selected`]: dateItem.selected,
                            [`${mergedClsPrefix}-date-panel-date--excluded`]: !dateItem.inCurrentMonth,
                            [`${mergedClsPrefix}-date-panel-date--disabled`]: this.mergedIsDateDisabled(dateItem.ts)
                        }
                    ], onClick: () => this.handleDateClick(dateItem) },
                    dateItem.dateObject.date,
                    dateItem.isCurrentDate ? (h("div", { class: `${mergedClsPrefix}-date-panel-date__sup` })) : null))))),
            this.datePickerSlots.footer ? (h("div", { class: `${mergedClsPrefix}-date-panel-footer` }, renderSlot(this.datePickerSlots, 'footer'))) : null,
            ((_a = this.actions) === null || _a === void 0 ? void 0 : _a.length) ? (h("div", { class: `${mergedClsPrefix}-date-panel-actions` },
                h("div", { class: `${mergedClsPrefix}-date-panel-actions__prefix` }),
                h("div", { class: `${mergedClsPrefix}-date-panel-actions__suffix` },
                    this.actions.includes('clear') ? (h(NButton, { theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, size: "tiny", onClick: this.clearSelectedDateTime }, { default: () => this.locale.clear })) : null,
                    this.actions.includes('now') ? (h(NButton, { theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, size: "tiny", onClick: this.handleNowClick }, { default: () => this.locale.now })) : null,
                    this.actions.includes('confirm') ? (h(NButton, { theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, size: "tiny", type: "primary", disabled: this.isDateInvalid, onClick: this.handleConfirmClick }, { default: () => this.locale.confirm })) : null))) : null,
            h(NBaseFocusDetector, { onFocus: this.handleFocusDetectorFocus })));
    }
});
