import { h, defineComponent, computed, renderSlot } from 'vue';
import { EmptyIcon } from '../../_internal/icons';
import { useConfig, useLocale, useTheme } from '../../_mixins';
import { createKey } from '../../_utils';
import { NBaseIcon } from '../../_internal';
import { emptyLight } from '../styles';
import style from './styles/index.cssr';
const emptyProps = Object.assign(Object.assign({}, useTheme.props), { description: {
        type: String,
        default: undefined
    }, showDescription: {
        type: Boolean,
        default: true
    }, size: {
        type: String,
        default: 'medium'
    } });
export default defineComponent({
    name: 'Empty',
    props: emptyProps,
    setup(props) {
        const { mergedClsPrefixRef } = useConfig(props);
        const themeRef = useTheme('Empty', 'Empty', style, emptyLight, props, mergedClsPrefixRef);
        const { localeRef } = useLocale('Empty');
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            localizedDescription: computed(() => {
                return props.description || localeRef.value.description;
            }),
            cssVars: computed(() => {
                const { size } = props;
                const { common: { cubicBezierEaseInOut }, self: { [createKey('iconSize', size)]: iconSize, [createKey('fontSize', size)]: fontSize, textColor, iconColor, extraTextColor } } = themeRef.value;
                return {
                    '--icon-size': iconSize,
                    '--font-size': fontSize,
                    '--bezier': cubicBezierEaseInOut,
                    '--text-color': textColor,
                    '--icon-color': iconColor,
                    '--extra-text-color': extraTextColor
                };
            })
        };
    },
    render() {
        const { $slots, mergedClsPrefix } = this;
        return (h("div", { class: `${mergedClsPrefix}-empty`, style: this.cssVars },
            h("div", { class: `${mergedClsPrefix}-empty__icon` }, renderSlot($slots, 'icon', undefined, () => [
                h(NBaseIcon, { clsPrefix: mergedClsPrefix }, { default: () => h(EmptyIcon, null) })
            ])),
            this.showDescription ? (h("div", { class: `${mergedClsPrefix}-empty__description` }, renderSlot($slots, 'default', undefined, () => [
                this.localizedDescription
            ]))) : null,
            $slots.extra ? (h("div", { class: `${mergedClsPrefix}-empty__extra` }, renderSlot($slots, 'extra'))) : null));
    }
});
