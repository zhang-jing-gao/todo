import type { ExtractPublicPropTypes } from '../../_utils';
export declare const formItemGiProps: {
    readonly label: {
        readonly type: import("vue").PropType<string | false | undefined>;
        readonly default: undefined;
    };
    readonly labelWidth: import("vue").PropType<string | number>;
    readonly labelStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly labelAlign: import("vue").PropType<import("./interface").LabelAlign>;
    readonly labelPlacement: import("vue").PropType<import("./interface").LabelPlacement>;
    readonly path: StringConstructor;
    readonly first: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly rulePath: StringConstructor;
    readonly required: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly showRequireMark: {
        readonly type: import("vue").PropType<boolean | "left" | "right">;
        readonly default: undefined;
    };
    readonly showFeedback: {
        readonly type: import("vue").PropType<boolean | undefined>;
        readonly default: undefined;
    };
    readonly rule: import("vue").PropType<import("./interface").FormItemRule | import("./interface").FormItemRule[]>;
    readonly size: import("vue").PropType<"small" | "medium" | "large">;
    readonly ignorePathChange: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly validationStatus: import("vue").PropType<"error" | "success" | "warning">;
    readonly feedback: StringConstructor;
    readonly theme: import("vue").PropType<import("../../_mixins").Theme<"Form", {
        lineHeight: string;
        labelTextColor: string;
        asteriskColor: string;
        feedbackTextColorError: string;
        feedbackTextColorWarning: string;
        feedbackTextColor: string;
        blankHeightSmall: string;
        blankHeightMedium: string;
        blankHeightLarge: string;
        feedbackPadding: string;
        feedbackHeightSmall: string;
        feedbackHeightMedium: string;
        feedbackHeightLarge: string;
        feedbackFontSizeSmall: string;
        feedbackFontSizeMedium: string;
        feedbackFontSizeLarge: string;
        labelFontSizeLeftSmall: string;
        labelFontSizeLeftMedium: string;
        labelFontSizeLeftLarge: string;
        labelFontSizeTopSmall: string;
        labelFontSizeTopMedium: string;
        labelFontSizeTopLarge: string;
        labelHeightSmall: string;
        labelHeightMedium: string;
        labelHeightLarge: string;
        labelPaddingVertical: string;
        labelPaddingHorizontal: string;
        labelTextAlignVertical: string;
        labelTextAlignHorizontal: string;
    }, any>>;
    readonly themeOverrides: import("vue").PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Form", {
        lineHeight: string;
        labelTextColor: string;
        asteriskColor: string;
        feedbackTextColorError: string;
        feedbackTextColorWarning: string;
        feedbackTextColor: string;
        blankHeightSmall: string;
        blankHeightMedium: string;
        blankHeightLarge: string;
        feedbackPadding: string;
        feedbackHeightSmall: string;
        feedbackHeightMedium: string;
        feedbackHeightLarge: string;
        feedbackFontSizeSmall: string;
        feedbackFontSizeMedium: string;
        feedbackFontSizeLarge: string;
        labelFontSizeLeftSmall: string;
        labelFontSizeLeftMedium: string;
        labelFontSizeLeftLarge: string;
        labelFontSizeTopSmall: string;
        labelFontSizeTopMedium: string;
        labelFontSizeTopLarge: string;
        labelHeightSmall: string;
        labelHeightMedium: string;
        labelHeightLarge: string;
        labelPaddingVertical: string;
        labelPaddingHorizontal: string;
        labelTextAlignVertical: string;
        labelTextAlignHorizontal: string;
    }, any>>>;
    readonly builtinThemeOverrides: import("vue").PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Form", {
        lineHeight: string;
        labelTextColor: string;
        asteriskColor: string;
        feedbackTextColorError: string;
        feedbackTextColorWarning: string;
        feedbackTextColor: string;
        blankHeightSmall: string;
        blankHeightMedium: string;
        blankHeightLarge: string;
        feedbackPadding: string;
        feedbackHeightSmall: string;
        feedbackHeightMedium: string;
        feedbackHeightLarge: string;
        feedbackFontSizeSmall: string;
        feedbackFontSizeMedium: string;
        feedbackFontSizeLarge: string;
        labelFontSizeLeftSmall: string;
        labelFontSizeLeftMedium: string;
        labelFontSizeLeftLarge: string;
        labelFontSizeTopSmall: string;
        labelFontSizeTopMedium: string;
        labelFontSizeTopLarge: string;
        labelHeightSmall: string;
        labelHeightMedium: string;
        labelHeightLarge: string;
        labelPaddingVertical: string;
        labelPaddingHorizontal: string;
        labelTextAlignVertical: string;
        labelTextAlignHorizontal: string;
    }, any>>>;
    readonly span: {
        readonly type: import("vue").PropType<string | number>;
        readonly default: 1;
    };
    readonly offset: {
        readonly type: import("vue").PropType<string | number>;
        readonly default: 0;
    };
    readonly suffix: BooleanConstructor;
    readonly privateOffset: NumberConstructor;
    readonly privateSpan: NumberConstructor;
    readonly privateColStart: NumberConstructor;
    readonly privateShow: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
};
export declare const formItemGiPropKeys: ("label" | "size" | "first" | "span" | "path" | "offset" | "suffix" | "theme" | "themeOverrides" | "builtinThemeOverrides" | "labelPlacement" | "labelAlign" | "required" | "labelWidth" | "showRequireMark" | "showFeedback" | "labelStyle" | "rulePath" | "rule" | "ignorePathChange" | "validationStatus" | "feedback" | "privateOffset" | "privateSpan" | "privateColStart" | "privateShow")[];
export declare type FormItemGiProps = ExtractPublicPropTypes<typeof formItemGiProps>;
declare const _default: import("vue").DefineComponent<{
    readonly label: {
        readonly type: import("vue").PropType<string | false | undefined>;
        readonly default: undefined;
    };
    readonly labelWidth: import("vue").PropType<string | number>;
    readonly labelStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly labelAlign: import("vue").PropType<import("./interface").LabelAlign>;
    readonly labelPlacement: import("vue").PropType<import("./interface").LabelPlacement>;
    readonly path: StringConstructor;
    readonly first: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly rulePath: StringConstructor;
    readonly required: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly showRequireMark: {
        readonly type: import("vue").PropType<boolean | "left" | "right">;
        readonly default: undefined;
    };
    readonly showFeedback: {
        readonly type: import("vue").PropType<boolean | undefined>;
        readonly default: undefined;
    };
    readonly rule: import("vue").PropType<import("./interface").FormItemRule | import("./interface").FormItemRule[]>;
    readonly size: import("vue").PropType<"small" | "medium" | "large">;
    readonly ignorePathChange: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly validationStatus: import("vue").PropType<"error" | "success" | "warning">;
    readonly feedback: StringConstructor;
    readonly theme: import("vue").PropType<import("../../_mixins").Theme<"Form", {
        lineHeight: string;
        labelTextColor: string;
        asteriskColor: string;
        feedbackTextColorError: string;
        feedbackTextColorWarning: string;
        feedbackTextColor: string;
        blankHeightSmall: string;
        blankHeightMedium: string;
        blankHeightLarge: string;
        feedbackPadding: string;
        feedbackHeightSmall: string;
        feedbackHeightMedium: string;
        feedbackHeightLarge: string;
        feedbackFontSizeSmall: string;
        feedbackFontSizeMedium: string;
        feedbackFontSizeLarge: string;
        labelFontSizeLeftSmall: string;
        labelFontSizeLeftMedium: string;
        labelFontSizeLeftLarge: string;
        labelFontSizeTopSmall: string;
        labelFontSizeTopMedium: string;
        labelFontSizeTopLarge: string;
        labelHeightSmall: string;
        labelHeightMedium: string;
        labelHeightLarge: string;
        labelPaddingVertical: string;
        labelPaddingHorizontal: string;
        labelTextAlignVertical: string;
        labelTextAlignHorizontal: string;
    }, any>>;
    readonly themeOverrides: import("vue").PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Form", {
        lineHeight: string;
        labelTextColor: string;
        asteriskColor: string;
        feedbackTextColorError: string;
        feedbackTextColorWarning: string;
        feedbackTextColor: string;
        blankHeightSmall: string;
        blankHeightMedium: string;
        blankHeightLarge: string;
        feedbackPadding: string;
        feedbackHeightSmall: string;
        feedbackHeightMedium: string;
        feedbackHeightLarge: string;
        feedbackFontSizeSmall: string;
        feedbackFontSizeMedium: string;
        feedbackFontSizeLarge: string;
        labelFontSizeLeftSmall: string;
        labelFontSizeLeftMedium: string;
        labelFontSizeLeftLarge: string;
        labelFontSizeTopSmall: string;
        labelFontSizeTopMedium: string;
        labelFontSizeTopLarge: string;
        labelHeightSmall: string;
        labelHeightMedium: string;
        labelHeightLarge: string;
        labelPaddingVertical: string;
        labelPaddingHorizontal: string;
        labelTextAlignVertical: string;
        labelTextAlignHorizontal: string;
    }, any>>>;
    readonly builtinThemeOverrides: import("vue").PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Form", {
        lineHeight: string;
        labelTextColor: string;
        asteriskColor: string;
        feedbackTextColorError: string;
        feedbackTextColorWarning: string;
        feedbackTextColor: string;
        blankHeightSmall: string;
        blankHeightMedium: string;
        blankHeightLarge: string;
        feedbackPadding: string;
        feedbackHeightSmall: string;
        feedbackHeightMedium: string;
        feedbackHeightLarge: string;
        feedbackFontSizeSmall: string;
        feedbackFontSizeMedium: string;
        feedbackFontSizeLarge: string;
        labelFontSizeLeftSmall: string;
        labelFontSizeLeftMedium: string;
        labelFontSizeLeftLarge: string;
        labelFontSizeTopSmall: string;
        labelFontSizeTopMedium: string;
        labelFontSizeTopLarge: string;
        labelHeightSmall: string;
        labelHeightMedium: string;
        labelHeightLarge: string;
        labelPaddingVertical: string;
        labelPaddingHorizontal: string;
        labelTextAlignVertical: string;
        labelTextAlignHorizontal: string;
    }, any>>>;
    readonly span: {
        readonly type: import("vue").PropType<string | number>;
        readonly default: 1;
    };
    readonly offset: {
        readonly type: import("vue").PropType<string | number>;
        readonly default: 0;
    };
    readonly suffix: BooleanConstructor;
    readonly privateOffset: NumberConstructor;
    readonly privateSpan: NumberConstructor;
    readonly privateColStart: NumberConstructor;
    readonly privateShow: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
}, {
    validate: import("./interface").FormItemValidate;
    restoreValidation: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly label?: unknown;
    readonly labelWidth?: unknown;
    readonly labelStyle?: unknown;
    readonly labelAlign?: unknown;
    readonly labelPlacement?: unknown;
    readonly path?: unknown;
    readonly first?: unknown;
    readonly rulePath?: unknown;
    readonly required?: unknown;
    readonly showRequireMark?: unknown;
    readonly showFeedback?: unknown;
    readonly rule?: unknown;
    readonly size?: unknown;
    readonly ignorePathChange?: unknown;
    readonly validationStatus?: unknown;
    readonly feedback?: unknown;
    readonly theme?: unknown;
    readonly themeOverrides?: unknown;
    readonly builtinThemeOverrides?: unknown;
    readonly span?: unknown;
    readonly offset?: unknown;
    readonly suffix?: unknown;
    readonly privateOffset?: unknown;
    readonly privateSpan?: unknown;
    readonly privateColStart?: unknown;
    readonly privateShow?: unknown;
} & {
    first: boolean;
    span: string | number;
    offset: string | number;
    suffix: boolean;
    required: boolean;
    ignorePathChange: boolean;
    privateShow: boolean;
} & {
    label?: string | false | undefined;
    size?: "small" | "medium" | "large" | undefined;
    path?: string | undefined;
    theme?: import("../../_mixins").Theme<"Form", {
        lineHeight: string;
        labelTextColor: string;
        asteriskColor: string;
        feedbackTextColorError: string;
        feedbackTextColorWarning: string;
        feedbackTextColor: string;
        blankHeightSmall: string;
        blankHeightMedium: string;
        blankHeightLarge: string;
        feedbackPadding: string;
        feedbackHeightSmall: string;
        feedbackHeightMedium: string;
        feedbackHeightLarge: string;
        feedbackFontSizeSmall: string;
        feedbackFontSizeMedium: string;
        feedbackFontSizeLarge: string;
        labelFontSizeLeftSmall: string;
        labelFontSizeLeftMedium: string;
        labelFontSizeLeftLarge: string;
        labelFontSizeTopSmall: string;
        labelFontSizeTopMedium: string;
        labelFontSizeTopLarge: string;
        labelHeightSmall: string;
        labelHeightMedium: string;
        labelHeightLarge: string;
        labelPaddingVertical: string;
        labelPaddingHorizontal: string;
        labelTextAlignVertical: string;
        labelTextAlignHorizontal: string;
    }, any> | undefined;
    themeOverrides?: import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Form", {
        lineHeight: string;
        labelTextColor: string;
        asteriskColor: string;
        feedbackTextColorError: string;
        feedbackTextColorWarning: string;
        feedbackTextColor: string;
        blankHeightSmall: string;
        blankHeightMedium: string;
        blankHeightLarge: string;
        feedbackPadding: string;
        feedbackHeightSmall: string;
        feedbackHeightMedium: string;
        feedbackHeightLarge: string;
        feedbackFontSizeSmall: string;
        feedbackFontSizeMedium: string;
        feedbackFontSizeLarge: string;
        labelFontSizeLeftSmall: string;
        labelFontSizeLeftMedium: string;
        labelFontSizeLeftLarge: string;
        labelFontSizeTopSmall: string;
        labelFontSizeTopMedium: string;
        labelFontSizeTopLarge: string;
        labelHeightSmall: string;
        labelHeightMedium: string;
        labelHeightLarge: string;
        labelPaddingVertical: string;
        labelPaddingHorizontal: string;
        labelTextAlignVertical: string;
        labelTextAlignHorizontal: string;
    }, any>> | undefined;
    builtinThemeOverrides?: import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Form", {
        lineHeight: string;
        labelTextColor: string;
        asteriskColor: string;
        feedbackTextColorError: string;
        feedbackTextColorWarning: string;
        feedbackTextColor: string;
        blankHeightSmall: string;
        blankHeightMedium: string;
        blankHeightLarge: string;
        feedbackPadding: string;
        feedbackHeightSmall: string;
        feedbackHeightMedium: string;
        feedbackHeightLarge: string;
        feedbackFontSizeSmall: string;
        feedbackFontSizeMedium: string;
        feedbackFontSizeLarge: string;
        labelFontSizeLeftSmall: string;
        labelFontSizeLeftMedium: string;
        labelFontSizeLeftLarge: string;
        labelFontSizeTopSmall: string;
        labelFontSizeTopMedium: string;
        labelFontSizeTopLarge: string;
        labelHeightSmall: string;
        labelHeightMedium: string;
        labelHeightLarge: string;
        labelPaddingVertical: string;
        labelPaddingHorizontal: string;
        labelTextAlignVertical: string;
        labelTextAlignHorizontal: string;
    }, any>> | undefined;
    labelPlacement?: import("./interface").LabelPlacement | undefined;
    labelAlign?: import("./interface").LabelAlign | undefined;
    labelWidth?: string | number | undefined;
    showRequireMark?: boolean | "left" | "right" | undefined;
    showFeedback?: boolean | undefined;
    labelStyle?: string | import("vue").CSSProperties | undefined;
    rulePath?: string | undefined;
    rule?: import("./interface").FormItemRule | import("./interface").FormItemRule[] | undefined;
    validationStatus?: "error" | "success" | "warning" | undefined;
    feedback?: string | undefined;
    privateOffset?: number | undefined;
    privateSpan?: number | undefined;
    privateColStart?: number | undefined;
}>, {
    label: string | false | undefined;
    first: boolean;
    span: string | number;
    offset: string | number;
    suffix: boolean;
    required: boolean;
    showRequireMark: boolean | "left" | "right";
    showFeedback: boolean | undefined;
    ignorePathChange: boolean;
    privateShow: boolean;
}>;
export default _default;
