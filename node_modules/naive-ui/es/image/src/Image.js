import { defineComponent, h, inject, ref, toRef, mergeProps } from 'vue';
import NImagePreview from './ImagePreview';
import { imageGroupInjectionKey } from './ImageGroup';
import { useConfig } from '../../_mixins';
const imageProps = {
    alt: String,
    height: [String, Number],
    imgProps: Object,
    width: [String, Number],
    src: String,
    showToolbar: { type: Boolean, default: true }
};
export default defineComponent({
    name: 'Image',
    props: imageProps,
    inheritAttrs: false,
    setup(props) {
        const imageRef = ref(null);
        const imgPropsRef = toRef(props, 'imgProps');
        const previewInstRef = ref(null);
        const imageGroupHandle = inject(imageGroupInjectionKey, null);
        const { mergedClsPrefixRef } = imageGroupHandle || useConfig(props);
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            groupId: imageGroupHandle === null || imageGroupHandle === void 0 ? void 0 : imageGroupHandle.groupId,
            previewInstRef,
            imageRef,
            imgProps: imgPropsRef,
            handleClick: () => {
                if (imageGroupHandle) {
                    imageGroupHandle.setPreviewSrc(props.src);
                    imageGroupHandle.setThumbnailEl(imageRef.value);
                    imageGroupHandle.toggleShow();
                    return;
                }
                const { value: previewInst } = previewInstRef;
                if (!previewInst)
                    return;
                previewInst.setPreviewSrc(props.src);
                previewInst.setThumbnailEl(imageRef.value);
                previewInst.toggleShow();
            }
        };
    },
    render() {
        const { mergedClsPrefix, imgProps = {} } = this;
        const imgWrapperNode = h('div', mergeProps(this.$attrs, {
            role: 'none',
            class: `${mergedClsPrefix}-image`
        }), h("img", Object.assign({}, imgProps, { class: this.groupId, ref: "imageRef", width: this.width ? this.width : imgProps.width, height: this.height ? this.height : imgProps.height, src: this.src ? this.src : imgProps.src, alt: this.alt ? this.alt : imgProps.alt, "aria-label": this.alt ? this.alt : imgProps.alt, onClick: this.handleClick })));
        return this.groupId ? (imgWrapperNode) : (h(NImagePreview, { clsPrefix: mergedClsPrefix, ref: "previewInstRef", showToolbar: this.showToolbar }, {
            default: () => imgWrapperNode
        }));
    }
});
