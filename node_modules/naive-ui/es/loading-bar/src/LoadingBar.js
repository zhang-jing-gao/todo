var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { h, Transition, computed, defineComponent, inject, withDirectives, vShow, ref, nextTick } from 'vue';
import { useTheme } from '../../_mixins';
import { loadingBarLight } from '../styles';
import { loadingBarProviderInjectionKey } from './LoadingBarProvider';
import style from './styles/index.cssr';
function createClassName(status, clsPrefix) {
    return `${clsPrefix}-loading-bar ${clsPrefix}-loading-bar--${status}`;
}
export default defineComponent({
    name: 'LoadingBar',
    setup() {
        const { props: providerProps, mergedClsPrefixRef
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
         } = inject(loadingBarProviderInjectionKey);
        const loadingBarRef = ref(null);
        const enteringRef = ref(false);
        const loadingRef = ref(false);
        const transitionDisabledRef = ref(false);
        let finishing = false;
        let erroring = false;
        function init() {
            return __awaiter(this, void 0, void 0, function* () {
                enteringRef.value = false;
                loadingRef.value = false;
                finishing = false;
                erroring = false;
                transitionDisabledRef.value = true;
                yield nextTick();
                transitionDisabledRef.value = false;
            });
        }
        function start(fromProgress = 0, toProgress = 80, status = 'starting') {
            return __awaiter(this, void 0, void 0, function* () {
                yield init();
                loadingRef.value = true;
                yield nextTick();
                const el = loadingBarRef.value;
                if (!el)
                    return;
                el.style.maxWidth = `${fromProgress}%`;
                el.style.transition = 'none';
                void el.offsetWidth;
                el.className = createClassName(status, mergedClsPrefixRef.value);
                el.style.transition = '';
                el.style.maxWidth = `${toProgress}%`;
            });
        }
        function finish() {
            if (finishing || erroring)
                return;
            if (!loadingRef.value) {
                void start(100, 100).then(() => {
                    finishing = true;
                    const el = loadingBarRef.value;
                    if (!el)
                        return;
                    el.className = createClassName('finishing', mergedClsPrefixRef.value);
                    void el.offsetWidth;
                    loadingRef.value = false;
                });
            }
            else {
                finishing = true;
                const el = loadingBarRef.value;
                if (!el)
                    return;
                el.className = createClassName('finishing', mergedClsPrefixRef.value);
                el.style.maxWidth = '100%';
                void el.offsetWidth;
                loadingRef.value = false;
            }
        }
        function error() {
            if (finishing || erroring)
                return;
            if (!loadingRef.value) {
                void start(100, 100, 'error').then(() => {
                    erroring = true;
                    const el = loadingBarRef.value;
                    if (!el)
                        return;
                    el.className = createClassName('error', mergedClsPrefixRef.value);
                    void el.offsetWidth;
                    loadingRef.value = false;
                });
            }
            else {
                erroring = true;
                const el = loadingBarRef.value;
                if (!el)
                    return;
                el.className = createClassName('error', mergedClsPrefixRef.value);
                el.style.maxWidth = '100%';
                void el.offsetWidth;
                loadingRef.value = false;
            }
        }
        function handleEnter() {
            enteringRef.value = true;
        }
        function handleAfterEnter() {
            enteringRef.value = false;
        }
        function handleAfterLeave() {
            return __awaiter(this, void 0, void 0, function* () {
                yield init();
            });
        }
        const themeRef = useTheme('LoadingBar', 'LoadingBar', style, loadingBarLight, providerProps, mergedClsPrefixRef);
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            loadingBarRef,
            loading: loadingRef,
            entering: enteringRef,
            transitionDisabled: transitionDisabledRef,
            start,
            error,
            finish,
            handleEnter,
            handleAfterEnter,
            handleAfterLeave,
            cssVars: computed(() => {
                const { self: { height, colorError, colorLoading } } = themeRef.value;
                return {
                    '--height': height,
                    '--color-loading': colorLoading,
                    '--color-error': colorError
                };
            })
        };
    },
    render() {
        const { mergedClsPrefix } = this;
        return (h(Transition, { name: "fade-in-transition", appear: true, onEnter: this.handleEnter, onAfterEnter: this.handleAfterEnter, onAfterLeave: this.handleAfterLeave, css: !this.transitionDisabled }, {
            default: () => withDirectives(h("div", { class: `${mergedClsPrefix}-loading-bar-container` },
                h("div", { ref: "loadingBarRef", class: `${mergedClsPrefix}-loading-bar`, style: this.cssVars })), [[vShow, this.loading || (!this.loading && this.entering)]])
        }));
    }
});
