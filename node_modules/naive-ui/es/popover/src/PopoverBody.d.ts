import { PropType, CSSProperties, VNode } from 'vue';
import { FollowerPlacement } from 'vueuc';
import type { PopoverInjection } from './Popover';
import type { PopoverTrigger } from './interface';
export declare const popoverBodyProps: {
    to: {
        type: PropType<string | boolean | HTMLElement>;
        default: undefined;
    };
    show: BooleanConstructor;
    trigger: PropType<PopoverTrigger>;
    showArrow: BooleanConstructor;
    delay: NumberConstructor;
    duration: NumberConstructor;
    raw: BooleanConstructor;
    arrowStyle: PropType<string | CSSProperties>;
    displayDirective: PropType<"show" | "if">;
    x: NumberConstructor;
    y: NumberConstructor;
    filp: BooleanConstructor;
    overlap: BooleanConstructor;
    placement: PropType<FollowerPlacement>;
    width: PropType<number | "trigger">;
    animated: BooleanConstructor;
    onClickoutside: PropType<(e: MouseEvent) => void>;
    /** @deprecated */
    minWidth: NumberConstructor;
    maxWidth: NumberConstructor;
    theme: PropType<import("../../_mixins").Theme<"Popover", {
        fontSize: string;
        borderRadius: string;
        color: string;
        dividerColor: string;
        textColor: string;
        boxShadow: string;
        space: string;
        spaceArrow: string;
        arrowOffset: string;
        arrowOffsetVertical: string;
        arrowHeight: string;
        padding: string;
    }, any>>;
    themeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Popover", {
        fontSize: string;
        borderRadius: string;
        color: string;
        dividerColor: string;
        textColor: string;
        boxShadow: string;
        space: string;
        spaceArrow: string;
        arrowOffset: string;
        arrowOffsetVertical: string;
        arrowHeight: string;
        padding: string;
    }, any>>>;
    builtinThemeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Popover", {
        fontSize: string;
        borderRadius: string;
        color: string;
        dividerColor: string;
        textColor: string;
        boxShadow: string;
        space: string;
        spaceArrow: string;
        arrowOffset: string;
        arrowOffsetVertical: string;
        arrowHeight: string;
        padding: string;
    }, any>>>;
};
declare const _default: import("vue").DefineComponent<{
    to: {
        type: PropType<string | boolean | HTMLElement>;
        default: undefined;
    };
    show: BooleanConstructor;
    trigger: PropType<PopoverTrigger>;
    showArrow: BooleanConstructor;
    delay: NumberConstructor;
    duration: NumberConstructor;
    raw: BooleanConstructor;
    arrowStyle: PropType<string | CSSProperties>;
    displayDirective: PropType<"show" | "if">;
    x: NumberConstructor;
    y: NumberConstructor;
    filp: BooleanConstructor;
    overlap: BooleanConstructor;
    placement: PropType<FollowerPlacement>;
    width: PropType<number | "trigger">;
    animated: BooleanConstructor;
    onClickoutside: PropType<(e: MouseEvent) => void>;
    /** @deprecated */
    minWidth: NumberConstructor;
    maxWidth: NumberConstructor;
    theme: PropType<import("../../_mixins").Theme<"Popover", {
        fontSize: string;
        borderRadius: string;
        color: string;
        dividerColor: string;
        textColor: string;
        boxShadow: string;
        space: string;
        spaceArrow: string;
        arrowOffset: string;
        arrowOffsetVertical: string;
        arrowHeight: string;
        padding: string;
    }, any>>;
    themeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Popover", {
        fontSize: string;
        borderRadius: string;
        color: string;
        dividerColor: string;
        textColor: string;
        boxShadow: string;
        space: string;
        spaceArrow: string;
        arrowOffset: string;
        arrowOffsetVertical: string;
        arrowHeight: string;
        padding: string;
    }, any>>>;
    builtinThemeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Popover", {
        fontSize: string;
        borderRadius: string;
        color: string;
        dividerColor: string;
        textColor: string;
        boxShadow: string;
        space: string;
        spaceArrow: string;
        arrowOffset: string;
        arrowOffsetVertical: string;
        arrowHeight: string;
        padding: string;
    }, any>>>;
}, {
    namespace: import("vue").ComputedRef<string | undefined>;
    NPopover: PopoverInjection;
    followerRef: import("vue").Ref<{
        syncPosition: () => void;
    } | null>;
    adjustedTo: import("vue").ComputedRef<string | HTMLElement>;
    followerEnabled: import("vue").Ref<boolean>;
    renderContentNode: () => VNode | null;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    to?: unknown;
    show?: unknown;
    trigger?: unknown;
    showArrow?: unknown;
    delay?: unknown;
    duration?: unknown;
    raw?: unknown;
    arrowStyle?: unknown;
    displayDirective?: unknown;
    x?: unknown;
    y?: unknown;
    filp?: unknown;
    overlap?: unknown;
    placement?: unknown;
    width?: unknown;
    animated?: unknown;
    onClickoutside?: unknown;
    minWidth?: unknown;
    maxWidth?: unknown;
    theme?: unknown;
    themeOverrides?: unknown;
    builtinThemeOverrides?: unknown;
} & {
    show: boolean;
    overlap: boolean;
    raw: boolean;
    showArrow: boolean;
    filp: boolean;
    animated: boolean;
} & {
    x?: number | undefined;
    y?: number | undefined;
    duration?: number | undefined;
    maxWidth?: number | undefined;
    minWidth?: number | undefined;
    width?: number | "trigger" | undefined;
    theme?: import("../../_mixins").Theme<"Popover", {
        fontSize: string;
        borderRadius: string;
        color: string;
        dividerColor: string;
        textColor: string;
        boxShadow: string;
        space: string;
        spaceArrow: string;
        arrowOffset: string;
        arrowOffsetVertical: string;
        arrowHeight: string;
        padding: string;
    }, any> | undefined;
    themeOverrides?: import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Popover", {
        fontSize: string;
        borderRadius: string;
        color: string;
        dividerColor: string;
        textColor: string;
        boxShadow: string;
        space: string;
        spaceArrow: string;
        arrowOffset: string;
        arrowOffsetVertical: string;
        arrowHeight: string;
        padding: string;
    }, any>> | undefined;
    builtinThemeOverrides?: import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Popover", {
        fontSize: string;
        borderRadius: string;
        color: string;
        dividerColor: string;
        textColor: string;
        boxShadow: string;
        space: string;
        spaceArrow: string;
        arrowOffset: string;
        arrowOffsetVertical: string;
        arrowHeight: string;
        padding: string;
    }, any>> | undefined;
    to?: string | boolean | HTMLElement | undefined;
    placement?: FollowerPlacement | undefined;
    trigger?: PopoverTrigger | undefined;
    delay?: number | undefined;
    arrowStyle?: string | CSSProperties | undefined;
    displayDirective?: "show" | "if" | undefined;
    onClickoutside?: ((e: MouseEvent) => void) | undefined;
}>, {
    show: boolean;
    to: string | boolean | HTMLElement;
    overlap: boolean;
    raw: boolean;
    showArrow: boolean;
    filp: boolean;
    animated: boolean;
}>;
export default _default;
