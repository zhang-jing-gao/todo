import { PropType } from 'vue';
import { FollowerPlacement } from 'vueuc';
import type { MaybeArray, ExtractPublicPropTypes } from '../../_utils';
declare const sliderProps: {
    readonly to: {
        type: PropType<string | boolean | HTMLElement>;
        default: undefined;
    };
    readonly defaultValue: {
        readonly type: PropType<number | [number, number]>;
        readonly default: 0;
    };
    readonly marks: PropType<Record<string, string>>;
    readonly disabled: BooleanConstructor;
    readonly min: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
    readonly max: {
        readonly type: NumberConstructor;
        readonly default: 100;
    };
    readonly step: {
        readonly type: NumberConstructor;
        readonly default: 1;
    };
    readonly range: BooleanConstructor;
    readonly value: PropType<number | [number, number]>;
    readonly placement: {
        readonly type: PropType<FollowerPlacement>;
        readonly default: "top";
    };
    readonly showTooltip: {
        readonly type: PropType<boolean | undefined>;
        readonly default: undefined;
    };
    readonly tooltip: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly 'onUpdate:value': PropType<MaybeArray<(<T extends number & [number, number]>(value: T) => void)>>;
    readonly onUpdateValue: PropType<MaybeArray<(<T_1 extends number & [number, number]>(value: T_1) => void)>>;
    readonly onChange: {
        readonly type: PropType<MaybeArray<(<T_2 extends number & [number, number]>(value: T_2) => void)>>;
        readonly validator: () => boolean;
        readonly default: undefined;
    };
    readonly theme: PropType<import("../../_mixins").Theme<"Slider", {
        fontSize: string;
        railColor: string;
        railColorHover: string;
        fillColor: string;
        fillColorHover: string;
        handleColor: string;
        dotColor: string;
        dotColorModal: string;
        dotColorPopover: string;
        handleBoxShadow: string;
        handleBoxShadowHover: string;
        handleBoxShadowActive: string;
        handleBoxShadowFocus: string;
        indicatorColor: string;
        indicatorBoxShadow: string;
        indicatorTextColor: string;
        indicatorBorderRadius: string;
        dotBorder: string;
        dotBorderActive: string;
        dotBoxShadow: string;
        railHeight: string;
        handleSize: string;
        dotHeight: string;
        dotWidth: string;
        dotBorderRadius: string;
    }, any>>;
    readonly themeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Slider", {
        fontSize: string;
        railColor: string;
        railColorHover: string;
        fillColor: string;
        fillColorHover: string;
        handleColor: string;
        dotColor: string;
        dotColorModal: string;
        dotColorPopover: string;
        handleBoxShadow: string;
        handleBoxShadowHover: string;
        handleBoxShadowActive: string;
        handleBoxShadowFocus: string;
        indicatorColor: string;
        indicatorBoxShadow: string;
        indicatorTextColor: string;
        indicatorBorderRadius: string;
        dotBorder: string;
        dotBorderActive: string;
        dotBoxShadow: string;
        railHeight: string;
        handleSize: string;
        dotHeight: string;
        dotWidth: string;
        dotBorderRadius: string;
    }, any>>>;
    readonly builtinThemeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Slider", {
        fontSize: string;
        railColor: string;
        railColorHover: string;
        fillColor: string;
        fillColorHover: string;
        handleColor: string;
        dotColor: string;
        dotColorModal: string;
        dotColorPopover: string;
        handleBoxShadow: string;
        handleBoxShadowHover: string;
        handleBoxShadowActive: string;
        handleBoxShadowFocus: string;
        indicatorColor: string;
        indicatorBoxShadow: string;
        indicatorTextColor: string;
        indicatorBorderRadius: string;
        dotBorder: string;
        dotBorderActive: string;
        dotBoxShadow: string;
        railHeight: string;
        handleSize: string;
        dotHeight: string;
        dotWidth: string;
        dotBorderRadius: string;
    }, any>>>;
};
export declare type SliderProps = ExtractPublicPropTypes<typeof sliderProps>;
declare const _default: import("vue").DefineComponent<{
    readonly to: {
        type: PropType<string | boolean | HTMLElement>;
        default: undefined;
    };
    readonly defaultValue: {
        readonly type: PropType<number | [number, number]>;
        readonly default: 0;
    };
    readonly marks: PropType<Record<string, string>>;
    readonly disabled: BooleanConstructor;
    readonly min: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
    readonly max: {
        readonly type: NumberConstructor;
        readonly default: 100;
    };
    readonly step: {
        readonly type: NumberConstructor;
        readonly default: 1;
    };
    readonly range: BooleanConstructor;
    readonly value: PropType<number | [number, number]>;
    readonly placement: {
        readonly type: PropType<FollowerPlacement>;
        readonly default: "top";
    };
    readonly showTooltip: {
        readonly type: PropType<boolean | undefined>;
        readonly default: undefined;
    };
    readonly tooltip: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly 'onUpdate:value': PropType<MaybeArray<(<T extends number & [number, number]>(value: T) => void)>>;
    readonly onUpdateValue: PropType<MaybeArray<(<T_1 extends number & [number, number]>(value: T_1) => void)>>;
    readonly onChange: {
        readonly type: PropType<MaybeArray<(<T_2 extends number & [number, number]>(value: T_2) => void)>>;
        readonly validator: () => boolean;
        readonly default: undefined;
    };
    readonly theme: PropType<import("../../_mixins").Theme<"Slider", {
        fontSize: string;
        railColor: string;
        railColorHover: string;
        fillColor: string;
        fillColorHover: string;
        handleColor: string;
        dotColor: string;
        dotColorModal: string;
        dotColorPopover: string;
        handleBoxShadow: string;
        handleBoxShadowHover: string;
        handleBoxShadowActive: string;
        handleBoxShadowFocus: string;
        indicatorColor: string;
        indicatorBoxShadow: string;
        indicatorTextColor: string;
        indicatorBorderRadius: string;
        dotBorder: string;
        dotBorderActive: string;
        dotBoxShadow: string;
        railHeight: string;
        handleSize: string;
        dotHeight: string;
        dotWidth: string;
        dotBorderRadius: string;
    }, any>>;
    readonly themeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Slider", {
        fontSize: string;
        railColor: string;
        railColorHover: string;
        fillColor: string;
        fillColorHover: string;
        handleColor: string;
        dotColor: string;
        dotColorModal: string;
        dotColorPopover: string;
        handleBoxShadow: string;
        handleBoxShadowHover: string;
        handleBoxShadowActive: string;
        handleBoxShadowFocus: string;
        indicatorColor: string;
        indicatorBoxShadow: string;
        indicatorTextColor: string;
        indicatorBorderRadius: string;
        dotBorder: string;
        dotBorderActive: string;
        dotBoxShadow: string;
        railHeight: string;
        handleSize: string;
        dotHeight: string;
        dotWidth: string;
        dotBorderRadius: string;
    }, any>>>;
    readonly builtinThemeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Slider", {
        fontSize: string;
        railColor: string;
        railColorHover: string;
        fillColor: string;
        fillColorHover: string;
        handleColor: string;
        dotColor: string;
        dotColorModal: string;
        dotColorPopover: string;
        handleBoxShadow: string;
        handleBoxShadowHover: string;
        handleBoxShadowActive: string;
        handleBoxShadowFocus: string;
        indicatorColor: string;
        indicatorBoxShadow: string;
        indicatorTextColor: string;
        indicatorBorderRadius: string;
        dotBorder: string;
        dotBorderActive: string;
        dotBoxShadow: string;
        railHeight: string;
        handleSize: string;
        dotHeight: string;
        dotWidth: string;
        dotBorderRadius: string;
    }, any>>>;
}, {
    mergedClsPrefix: import("vue").ComputedRef<string>;
    namespace: import("vue").ComputedRef<string | undefined>;
    uncontrolledValue: import("vue").Ref<number | [number, number]>;
    mergedValue: import("vue").ComputedRef<number | [number, number]>;
    isMounted: Readonly<import("vue").Ref<boolean>>;
    adjustedTo: import("vue").ComputedRef<string | HTMLElement>;
    handleValue1: import("vue").ComputedRef<number>;
    handleValue2: import("vue").ComputedRef<number>;
    mergedShowTooltip1: import("vue").ComputedRef<boolean>;
    mergedShowTooltip2: import("vue").ComputedRef<boolean>;
    handleActive1: import("vue").Ref<boolean>;
    handleActive2: import("vue").Ref<boolean>;
    handleClicked1: import("vue").Ref<boolean>;
    handleClicked2: import("vue").Ref<boolean>;
    memoziedOtherValue: import("vue").Ref<number>;
    active: import("vue").ComputedRef<boolean>;
    prevActive: import("vue").Ref<boolean>;
    clicked: import("vue").ComputedRef<boolean>;
    dotTransitionDisabled: import("vue").Ref<boolean>;
    markInfos: import("vue").ComputedRef<{
        active: boolean;
        label: string;
        style: {
            left: string;
        };
    }[]>;
    handleRef1: import("vue").Ref<HTMLElement | null>;
    handleRef2: import("vue").Ref<HTMLElement | null>;
    railRef: import("vue").Ref<HTMLElement | null>;
    followerRef1: import("vue").Ref<{
        syncPosition: () => void;
    } | null>;
    followerRef2: import("vue").Ref<{
        syncPosition: () => void;
    } | null>;
    firstHandleStyle: import("vue").ComputedRef<{
        left: string;
        transform: string;
        zIndex: number;
    }>;
    secondHandleStyle: import("vue").ComputedRef<{
        left: string;
        transform: string;
        zIndex: number;
    }>;
    fillStyle: import("vue").ComputedRef<{
        left: string;
        width: string;
    } | {
        left: number;
        width: string;
    }>;
    handleKeyDown: (e: KeyboardEvent) => void;
    handleRailClick: (e: MouseEvent) => void;
    handleHandleFocus1: () => void;
    handleHandleBlur1: () => void;
    handleFirstHandleMouseDown: (e: MouseEvent | TouchEvent) => void;
    handleFirstHandleMouseEnter: () => void;
    handleFirstHandleMouseLeave: () => void;
    handleHandleFocus2: () => void;
    handleHandleBlur2: () => void;
    handleSecondHandleMouseDown: (e: MouseEvent | TouchEvent) => void;
    handleSecondHandleMouseEnter: () => void;
    handleSecondHandleMouseLeave: () => void;
    indicatorCssVars: import("vue").ComputedRef<{
        '--font-size': string;
        '--indicator-border-radius': string;
        '--indicator-box-shadow': string;
        '--indicator-color': string;
        '--indicator-text-color': string;
    }>;
    cssVars: import("vue").ComputedRef<{
        '--bezier': string;
        '--dot-border': string;
        '--dot-border-active': string;
        '--dot-border-radius': string;
        '--dot-box-shadow': string;
        '--dot-color': string;
        '--dot-color-modal': string;
        '--dot-color-popover': string;
        '--dot-height': string;
        '--dot-width': string;
        '--fill-color': string;
        '--fill-color-hover': string;
        '--font-size': string;
        '--handle-box-shadow': string;
        '--handle-box-shadow-active': string;
        '--handle-box-shadow-focus': string;
        '--handle-box-shadow-hover': string;
        '--handle-color': string;
        '--handle-size': string;
        '--rail-color': string;
        '--rail-color-hover': string;
        '--rail-height': string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly to?: unknown;
    readonly defaultValue?: unknown;
    readonly marks?: unknown;
    readonly disabled?: unknown;
    readonly min?: unknown;
    readonly max?: unknown;
    readonly step?: unknown;
    readonly range?: unknown;
    readonly value?: unknown;
    readonly placement?: unknown;
    readonly showTooltip?: unknown;
    readonly tooltip?: unknown;
    readonly 'onUpdate:value'?: unknown;
    readonly onUpdateValue?: unknown;
    readonly onChange?: unknown;
    readonly theme?: unknown;
    readonly themeOverrides?: unknown;
    readonly builtinThemeOverrides?: unknown;
} & {
    range: boolean;
    tooltip: boolean;
    disabled: boolean;
    step: number;
    placement: FollowerPlacement;
    max: number;
    defaultValue: number | [number, number];
    min: number;
} & {
    value?: number | [number, number] | undefined;
    onChange?: MaybeArray<(<T_2 extends number & [number, number]>(value: T_2) => void)> | undefined;
    theme?: import("../../_mixins").Theme<"Slider", {
        fontSize: string;
        railColor: string;
        railColorHover: string;
        fillColor: string;
        fillColorHover: string;
        handleColor: string;
        dotColor: string;
        dotColorModal: string;
        dotColorPopover: string;
        handleBoxShadow: string;
        handleBoxShadowHover: string;
        handleBoxShadowActive: string;
        handleBoxShadowFocus: string;
        indicatorColor: string;
        indicatorBoxShadow: string;
        indicatorTextColor: string;
        indicatorBorderRadius: string;
        dotBorder: string;
        dotBorderActive: string;
        dotBoxShadow: string;
        railHeight: string;
        handleSize: string;
        dotHeight: string;
        dotWidth: string;
        dotBorderRadius: string;
    }, any> | undefined;
    themeOverrides?: import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Slider", {
        fontSize: string;
        railColor: string;
        railColorHover: string;
        fillColor: string;
        fillColorHover: string;
        handleColor: string;
        dotColor: string;
        dotColorModal: string;
        dotColorPopover: string;
        handleBoxShadow: string;
        handleBoxShadowHover: string;
        handleBoxShadowActive: string;
        handleBoxShadowFocus: string;
        indicatorColor: string;
        indicatorBoxShadow: string;
        indicatorTextColor: string;
        indicatorBorderRadius: string;
        dotBorder: string;
        dotBorderActive: string;
        dotBoxShadow: string;
        railHeight: string;
        handleSize: string;
        dotHeight: string;
        dotWidth: string;
        dotBorderRadius: string;
    }, any>> | undefined;
    builtinThemeOverrides?: import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Slider", {
        fontSize: string;
        railColor: string;
        railColorHover: string;
        fillColor: string;
        fillColorHover: string;
        handleColor: string;
        dotColor: string;
        dotColorModal: string;
        dotColorPopover: string;
        handleBoxShadow: string;
        handleBoxShadowHover: string;
        handleBoxShadowActive: string;
        handleBoxShadowFocus: string;
        indicatorColor: string;
        indicatorBoxShadow: string;
        indicatorTextColor: string;
        indicatorBorderRadius: string;
        dotBorder: string;
        dotBorderActive: string;
        dotBoxShadow: string;
        railHeight: string;
        handleSize: string;
        dotHeight: string;
        dotWidth: string;
        dotBorderRadius: string;
    }, any>> | undefined;
    to?: string | boolean | HTMLElement | undefined;
    "onUpdate:value"?: MaybeArray<(<T extends number & [number, number]>(value: T) => void)> | undefined;
    onUpdateValue?: MaybeArray<(<T_1 extends number & [number, number]>(value: T_1) => void)> | undefined;
    marks?: Record<string, string> | undefined;
    showTooltip?: boolean | undefined;
}>, {
    range: boolean;
    tooltip: boolean;
    disabled: boolean;
    step: number;
    onChange: MaybeArray<(<T_2 extends number & [number, number]>(value: T_2) => void)>;
    to: string | boolean | HTMLElement;
    placement: FollowerPlacement;
    max: number;
    defaultValue: number | [number, number];
    min: number;
    showTooltip: boolean | undefined;
}>;
export default _default;
