import { h, createTextVNode, defineComponent, computed } from 'vue';
import { format, formatDistance, fromUnixTime } from 'date-fns';
import { useLocale } from '../../_mixins';
const timeProps = {
    time: {
        type: [Number, Date],
        default: () => Date.now()
    },
    type: {
        type: String,
        default: 'datetime'
    },
    to: {
        type: [Number, Date],
        default: () => Date.now()
    },
    unix: {
        type: Boolean,
        default: false
    },
    format: String,
    text: {
        type: Boolean,
        default: false
    }
};
export default defineComponent({
    name: 'Time',
    props: timeProps,
    setup(props) {
        const { localeRef, dateLocaleRef } = useLocale('Time');
        const dateFnsOptionsRef = computed(() => {
            return {
                locale: dateLocaleRef.value.locale
            };
        });
        const mergedTimeRef = computed(() => {
            if (props.unix) {
                return fromUnixTime(props.time);
            }
            return props.time;
        });
        const mergedToRef = computed(() => {
            if (props.unix) {
                return fromUnixTime(props.to);
            }
            return props.to;
        });
        const renderedTimeRef = computed(() => {
            if (props.format) {
                return format(mergedTimeRef.value, props.format, dateFnsOptionsRef.value);
            }
            else if (props.type === 'date') {
                return format(mergedTimeRef.value, localeRef.value.dateFormat, dateFnsOptionsRef.value);
            }
            else if (props.type === 'datetime') {
                return format(mergedTimeRef.value, localeRef.value.dateTimeFormat, dateFnsOptionsRef.value);
            }
            else {
                return formatDistance(mergedTimeRef.value, mergedToRef.value, {
                    addSuffix: true,
                    locale: dateLocaleRef.value.locale
                });
            }
        });
        return {
            renderedTime: renderedTimeRef
        };
    },
    render() {
        return this.text
            ? createTextVNode(this.renderedTime)
            : h('time', [this.renderedTime]);
    }
});
