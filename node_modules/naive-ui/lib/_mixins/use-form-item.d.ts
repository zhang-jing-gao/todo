import { ComputedRef, InjectionKey, Ref } from 'vue';
declare type FormItemSize = 'small' | 'medium' | 'large';
declare type AllowedSize = 'tiny' | 'small' | 'medium' | 'large' | 'huge';
export interface FormItemInjection {
    path: Ref<string | undefined>;
    mergedSize: ComputedRef<FormItemSize>;
    restoreValidation: () => void;
    handleContentBlur: () => void;
    handleContentFocus: () => void;
    handleContentInput: () => void;
    handleContentChange: () => void;
}
export declare const formItemInjectionKey: InjectionKey<FormItemInjection>;
interface UseFormItemOptions<T> {
    defaultSize?: FormItemSize;
    mergedSize?: (formItem: FormItemInjection | null) => T;
}
declare type UseFormItemProps<T> = {
    size?: T;
} | {};
export interface UseFormItem<T> {
    mergedSizeRef: ComputedRef<T>;
    nTriggerFormBlur: () => void;
    nTriggerFormChange: () => void;
    nTriggerFormFocus: () => void;
    nTriggerFormInput: () => void;
}
export default function useFormItem<T extends AllowedSize = FormItemSize>(props: UseFormItemProps<T>, { defaultSize, mergedSize }?: UseFormItemOptions<T>): UseFormItem<T>;
export {};
