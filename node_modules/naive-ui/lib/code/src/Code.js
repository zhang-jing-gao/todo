"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const _mixins_1 = require("../../_mixins");
const styles_1 = require("../styles");
const index_cssr_1 = require("./styles/index.cssr");
const codeProps = Object.assign(Object.assign({}, _mixins_1.useTheme.props), { language: String, code: {
        type: String,
        default: ''
    }, trim: {
        type: Boolean,
        default: true
    }, hljs: Object, uri: {
        type: Boolean,
        default: false
    }, 
    // In n-log, we only need to mount code's style for highlight
    internalNoHighlight: Boolean });
exports.default = vue_1.defineComponent({
    name: 'Code',
    props: codeProps,
    setup(props, { slots }) {
        const { internalNoHighlight } = props;
        const { mergedClsPrefixRef } = _mixins_1.useConfig();
        const codeRef = vue_1.ref(null);
        const hljsRef = internalNoHighlight ? { value: undefined } : _mixins_1.useHljs(props);
        const createCodeHtml = (language, code, trim) => {
            const { value: hljs } = hljsRef;
            if (!hljs) {
                return null;
            }
            if (!(language && hljs.getLanguage(language))) {
                return null;
            }
            return hljs.highlight(trim ? code.trim() : code, {
                language
            }).value;
        };
        const setCode = () => {
            if (slots.default)
                return;
            const { value: codeEl } = codeRef;
            if (!codeEl)
                return;
            const { language } = props;
            const code = props.uri
                ? window.decodeURIComponent(props.code)
                : props.code;
            if (language) {
                const html = createCodeHtml(language, code, props.trim);
                if (html !== null) {
                    codeEl.innerHTML = html;
                    return;
                }
            }
            codeEl.textContent = code;
        };
        vue_1.onMounted(setCode);
        vue_1.watch(vue_1.toRef(props, 'language'), setCode);
        vue_1.watch(vue_1.toRef(props, 'code'), setCode);
        if (!internalNoHighlight)
            vue_1.watch(hljsRef, setCode);
        const themeRef = _mixins_1.useTheme('Code', 'Code', index_cssr_1.default, styles_1.codeLight, props, mergedClsPrefixRef);
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            codeRef,
            cssVars: vue_1.computed(() => {
                const { common: { cubicBezierEaseInOut, fontFamilyMono }, self: { textColor, fontSize, fontWeightStrong, 
                // extracted from hljs atom-one-light.scss
                'mono-3': $1, 'hue-1': $2, 'hue-2': $3, 'hue-3': $4, 'hue-4': $5, 'hue-5': $6, 'hue-5-2': $7, 'hue-6': $8, 'hue-6-2': $9 } } = themeRef.value;
                return {
                    '--font-size': fontSize,
                    '--font-family': fontFamilyMono,
                    '--font-weight-strong': fontWeightStrong,
                    '--bezier': cubicBezierEaseInOut,
                    '--text-color': textColor,
                    '--mono-3': $1,
                    '--hue-1': $2,
                    '--hue-2': $3,
                    '--hue-3': $4,
                    '--hue-4': $5,
                    '--hue-5': $6,
                    '--hue-5-2': $7,
                    '--hue-6': $8,
                    '--hue-6-2': $9
                };
            })
        };
    },
    render() {
        const { default: defaultSlot } = this.$slots;
        const { mergedClsPrefix } = this;
        return (vue_1.h("code", { class: `${mergedClsPrefix}-code`, style: this.cssVars }, defaultSlot ? defaultSlot() : vue_1.h("pre", { ref: "codeRef" })));
    }
});
