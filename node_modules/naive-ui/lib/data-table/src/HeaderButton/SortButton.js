"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const icons_1 = require("../../../_internal/icons");
const _internal_1 = require("../../../_internal");
const RenderSorter_1 = require("./RenderSorter");
const interface_1 = require("../interface");
const _mixins_1 = require("../../../_mixins");
exports.default = vue_1.defineComponent({
    name: 'SortIcon',
    props: {
        column: {
            type: Object,
            required: true
        }
    },
    setup(props) {
        const { NConfigProvider } = _mixins_1.useConfig();
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const { mergedSortStateRef, mergedClsPrefixRef } = vue_1.inject(interface_1.dataTableInjectionKey);
        const sortStateRef = mergedSortStateRef;
        const activeRef = vue_1.computed(() => {
            const { value } = sortStateRef;
            if (value)
                return value.columnKey === props.column.key;
            return false;
        });
        const mergedSortOrderRef = vue_1.computed(() => {
            const { value } = sortStateRef;
            if (value)
                return activeRef.value ? value.order : false;
            return false;
        });
        const mergedRenderSorterRef = vue_1.computed(() => {
            var _a, _b;
            return (((_b = (_a = NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedComponentPropsRef.value) === null || _a === void 0 ? void 0 : _a.DataTable) === null || _b === void 0 ? void 0 : _b.renderSorter) || props.column.renderSorter);
        });
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            active: activeRef,
            mergedSortOrder: mergedSortOrderRef,
            mergedRenderSorter: mergedRenderSorterRef
        };
    },
    render() {
        const { mergedRenderSorter, mergedSortOrder, mergedClsPrefix } = this;
        return mergedRenderSorter ? (vue_1.h(RenderSorter_1.default, { render: mergedRenderSorter, order: mergedSortOrder })) : (vue_1.h("span", { class: [
                `${mergedClsPrefix}-data-table-sorter`,
                {
                    [`${mergedClsPrefix}-data-table-sorter--asc`]: mergedSortOrder === 'ascend',
                    [`${mergedClsPrefix}-data-table-sorter--desc`]: mergedSortOrder === 'descend'
                }
            ] },
            vue_1.h(_internal_1.NBaseIcon, { clsPrefix: mergedClsPrefix }, { default: () => vue_1.h(icons_1.ArrowDownIcon, null) })));
    }
});
