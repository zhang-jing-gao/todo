"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-non-null-assertion */
const vue_1 = require("vue");
const _utils_1 = require("../../_utils");
const Header_1 = require("./TableParts/Header");
const Body_1 = require("./TableParts/Body");
const interface_1 = require("./interface");
exports.default = vue_1.defineComponent({
    setup() {
        const { mergedClsPrefixRef, rightFixedColumnsRef, leftFixedColumnsRef, bodyWidthRef, maxHeightRef, minHeightRef, handleTableHeaderScroll, syncScrollState
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
         } = vue_1.inject(interface_1.dataTableInjectionKey);
        const headerInstRef = vue_1.ref(null);
        const bodyInstRef = vue_1.ref(null);
        const selfElRef = vue_1.ref(null);
        const fixedStateInitializedRef = vue_1.ref(!(leftFixedColumnsRef.value.length || rightFixedColumnsRef.value.length));
        const bodyStyleRef = vue_1.computed(() => {
            return {
                maxHeight: _utils_1.formatLength(maxHeightRef.value),
                minHeight: _utils_1.formatLength(minHeightRef.value)
            };
        });
        function handleBodyResize(entry) {
            bodyWidthRef.value = entry.contentRect.width;
            syncScrollState();
            if (!fixedStateInitializedRef.value) {
                fixedStateInitializedRef.value = true;
            }
        }
        function getHeaderElement() {
            const { value } = headerInstRef;
            if (value) {
                return value.$el;
            }
            return null;
        }
        function getBodyElement() {
            const { value } = bodyInstRef;
            if (value) {
                return value.getScrollContainer();
            }
            return null;
        }
        const exposedMethods = {
            getBodyElement,
            getHeaderElement
        };
        vue_1.watchEffect(() => {
            const { value: selfEl } = selfElRef;
            if (!selfEl)
                return;
            const transitionDisabledClass = `${mergedClsPrefixRef.value}-data-table-base-table--transition-disabled`;
            if (fixedStateInitializedRef.value) {
                setTimeout(() => {
                    selfEl.classList.remove(transitionDisabledClass);
                }, 0);
            }
            else {
                selfEl.classList.add(transitionDisabledClass);
            }
        });
        return Object.assign({ maxHeight: maxHeightRef, mergedClsPrefix: mergedClsPrefixRef, selfElRef,
            headerInstRef,
            bodyInstRef, bodyStyle: bodyStyleRef, handleTableHeaderScroll,
            handleBodyResize }, exposedMethods);
    },
    render() {
        const { mergedClsPrefix, maxHeight } = this;
        const headerInBody = maxHeight === undefined;
        return (vue_1.h("div", { class: `${mergedClsPrefix}-data-table-base-table`, ref: "selfElRef" },
            headerInBody ? null : vue_1.h(Header_1.default, { ref: "headerInstRef" }),
            vue_1.h(Body_1.default, { ref: "bodyInstRef", style: this.bodyStyle, showHeader: headerInBody, onResize: this.handleBodyResize }),
            vue_1.renderSlot(this.$slots, 'default')));
    }
});
