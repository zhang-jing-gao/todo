"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const button_1 = require("../../../button");
const icons_1 = require("../../../_internal/icons");
const _internal_1 = require("../../../_internal");
const use_calendar_1 = require("./use-calendar");
/**
 * Date Panel
 * Update picker value on:
 * 1. item click
 * 2. clear click
 */
exports.default = vue_1.defineComponent({
    name: 'DatePanel',
    props: use_calendar_1.useCalendar.props,
    setup(props) {
        return use_calendar_1.useCalendar(props, 'date');
    },
    render() {
        var _a;
        const { mergedClsPrefix, mergedTheme } = this;
        return (vue_1.h("div", { ref: "selfRef", tabindex: 0, class: `${mergedClsPrefix}-date-panel ${mergedClsPrefix}-date-panel--date`, onFocus: this.handlePanelFocus, onKeydown: this.handlePanelKeyDown },
            vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-calendar` },
                vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-month` },
                    vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-month__fast-prev`, onClick: this.prevYear },
                        vue_1.h(icons_1.FastBackwardIcon, null)),
                    vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-month__prev`, onClick: this.prevMonth },
                        vue_1.h(icons_1.BackwardIcon, null)),
                    vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-month__month-year` }, this.locale.monthBeforeYear
                        ? `${this.calendarMonth} ${this.calendarYear}`
                        : `${this.calendarYear} ${this.calendarMonth}`),
                    vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-month__next`, onClick: this.nextMonth },
                        vue_1.h(icons_1.ForwardIcon, null)),
                    vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-month__fast-next`, onClick: this.nextYear },
                        vue_1.h(icons_1.FastForwardIcon, null))),
                vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-weekdays` }, this.weekdays.map((weekday) => (vue_1.h("div", { key: weekday, class: `${mergedClsPrefix}-date-panel-weekdays__day` }, weekday)))),
                vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-dates` }, this.dateArray.map((dateItem, i) => (vue_1.h("div", { "data-n-date": true, key: i, class: [
                        `${mergedClsPrefix}-date-panel-date`,
                        {
                            [`${mergedClsPrefix}-date-panel-date--current`]: dateItem.isCurrentDate,
                            [`${mergedClsPrefix}-date-panel-date--selected`]: dateItem.selected,
                            [`${mergedClsPrefix}-date-panel-date--excluded`]: !dateItem.inCurrentMonth,
                            [`${mergedClsPrefix}-date-panel-date--disabled`]: this.mergedIsDateDisabled(dateItem.ts)
                        }
                    ], onClick: () => this.handleDateClick(dateItem) },
                    dateItem.dateObject.date,
                    dateItem.isCurrentDate ? (vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-date__sup` })) : null))))),
            this.datePickerSlots.footer ? (vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-footer` }, vue_1.renderSlot(this.datePickerSlots, 'footer'))) : null,
            ((_a = this.actions) === null || _a === void 0 ? void 0 : _a.length) ? (vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-actions` },
                vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-actions__prefix` }),
                vue_1.h("div", { class: `${mergedClsPrefix}-date-panel-actions__suffix` },
                    this.actions.includes('clear') ? (vue_1.h(button_1.NButton, { theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, size: "tiny", onClick: this.handleClearClick }, { default: () => this.locale.clear })) : null,
                    this.actions.includes('now') ? (vue_1.h(button_1.NButton, { theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, size: "tiny", onClick: this.handleNowClick }, { default: () => this.locale.now })) : null))) : null,
            vue_1.h(_internal_1.NBaseFocusDetector, { onFocus: this.handleFocusDetectorFocus })));
    }
});
