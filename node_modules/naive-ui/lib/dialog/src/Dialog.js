"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dialogPropKeys = exports.dialogProps = void 0;
const vue_1 = require("vue");
const _mixins_1 = require("../../_mixins");
const _utils_1 = require("../../_utils");
const _internal_1 = require("../../_internal");
const button_1 = require("../../button");
const icons_1 = require("../../_internal/icons");
const styles_1 = require("../styles");
const index_cssr_1 = require("./styles/index.cssr");
const infoIcon = vue_1.h(icons_1.InfoIcon, null);
const iconMap = {
    default: infoIcon,
    info: infoIcon,
    success: vue_1.h(icons_1.SuccessIcon, null),
    warning: vue_1.h(icons_1.WarningIcon, null),
    error: vue_1.h(icons_1.ErrorIcon, null)
};
const dialogProps = {
    icon: Function,
    type: {
        type: String,
        default: 'default'
    },
    title: [String, Function],
    closable: {
        type: Boolean,
        default: true
    },
    negativeText: String,
    positiveText: String,
    content: [String, Function],
    showIcon: {
        type: Boolean,
        default: true
    },
    loading: {
        type: Boolean,
        default: false
    },
    bordered: {
        type: Boolean,
        default: false
    },
    iconPlacement: String,
    onPositiveClick: Function,
    onNegativeClick: Function,
    onClose: Function
};
exports.dialogProps = dialogProps;
exports.dialogPropKeys = _utils_1.keysOf(dialogProps);
exports.default = vue_1.defineComponent({
    name: 'Dialog',
    alias: [
        'NimbusConfirmCard',
        'Confirm' // deprecated
    ],
    props: Object.assign(Object.assign({}, _mixins_1.useTheme.props), dialogProps),
    setup(props) {
        const { NConfigProvider, mergedClsPrefixRef } = _mixins_1.useConfig(props);
        const mergedIconPlacementRef = vue_1.computed(() => {
            var _a, _b, _c;
            const { iconPlacement } = props;
            return ((_c = iconPlacement !== null && iconPlacement !== void 0 ? iconPlacement : (_b = (_a = NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedComponentPropsRef.value) === null || _a === void 0 ? void 0 : _a.Dialog) === null || _b === void 0 ? void 0 : _b.iconPlacement) !== null && _c !== void 0 ? _c : 'left');
        });
        function handlePositiveClick(e) {
            const { onPositiveClick } = props;
            if (onPositiveClick)
                onPositiveClick(e);
        }
        function handleNegativeClick(e) {
            const { onNegativeClick } = props;
            if (onNegativeClick)
                onNegativeClick(e);
        }
        function handleCloseClick() {
            const { onClose } = props;
            if (onClose)
                onClose();
        }
        const themeRef = _mixins_1.useTheme('Dialog', 'Dialog', index_cssr_1.default, styles_1.dialogLight, props, mergedClsPrefixRef);
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            mergedIconPlacement: mergedIconPlacementRef,
            mergedTheme: themeRef,
            handlePositiveClick,
            handleNegativeClick,
            handleCloseClick,
            cssVars: vue_1.computed(() => {
                const { type, iconPlacement } = props;
                const { common: { cubicBezierEaseInOut }, self: { fontSize, lineHeight, border, titleTextColor, textColor, color, closeColor, closeColorHover, closeColorPressed, borderRadius, titleFontWeight, titleFontSize, padding, iconSize, actionSpace, contentMargin, closeSize, [iconPlacement === 'top' ? 'iconMarginIconTop' : 'iconMargin']: iconMargin, [iconPlacement === 'top' ? 'closeMarginIconTop' : 'closeMargin']: closeMargin, [_utils_1.createKey('iconColor', type)]: iconColor } } = themeRef.value;
                return {
                    '--font-size': fontSize,
                    '--icon-color': iconColor,
                    '--bezier': cubicBezierEaseInOut,
                    '--close-margin': closeMargin,
                    '--icon-margin': iconMargin,
                    '--icon-size': iconSize,
                    '--close-size': closeSize,
                    '--close-color': closeColor,
                    '--close-color-hover': closeColorHover,
                    '--close-color-pressed': closeColorPressed,
                    '--color': color,
                    '--text-color': textColor,
                    '--border-radius': borderRadius,
                    '--padding': padding,
                    '--line-height': lineHeight,
                    '--border': border,
                    '--content-margin': contentMargin,
                    '--title-font-size': titleFontSize,
                    '--title-font-weight': titleFontWeight,
                    '--title-text-color': titleTextColor,
                    '--action-space': actionSpace
                };
            })
        };
    },
    render() {
        const { $slots, bordered, mergedIconPlacement, cssVars, closable, showIcon, title, content, negativeText, handlePositiveClick, handleNegativeClick, mergedTheme, loading, type, mergedClsPrefix } = this;
        return (vue_1.h("div", { class: [
                `${mergedClsPrefix}-dialog`,
                `${mergedClsPrefix}-dialog--icon-${mergedIconPlacement}`,
                bordered && `${mergedClsPrefix}-dialog--bordered`
            ], style: cssVars },
            closable ? (vue_1.h(_internal_1.NBaseClose, { clsPrefix: mergedClsPrefix, class: `${mergedClsPrefix}-dialog__close`, onClick: this.handleCloseClick })) : null,
            showIcon && mergedIconPlacement === 'top' ? (vue_1.h("div", { class: `${mergedClsPrefix}-dialog-icon-container` },
                vue_1.h(_internal_1.NBaseIcon, { clsPrefix: mergedClsPrefix, class: `${mergedClsPrefix}-dialog__icon` }, {
                    default: () => vue_1.renderSlot($slots, 'icon', undefined, () => [
                        this.icon ? _utils_1.render(this.icon) : iconMap[this.type]
                    ])
                }))) : null,
            vue_1.h("div", { class: `${mergedClsPrefix}-dialog__title` },
                showIcon && mergedIconPlacement === 'left' ? (vue_1.h(_internal_1.NBaseIcon, { clsPrefix: mergedClsPrefix, class: `${mergedClsPrefix}-dialog__icon` }, {
                    default: () => vue_1.renderSlot($slots, 'icon', undefined, () => [
                        this.icon ? _utils_1.render(this.icon) : iconMap[this.type]
                    ])
                })) : null,
                vue_1.renderSlot($slots, 'header', undefined, () => [_utils_1.render(title)])),
            vue_1.h("div", { class: `${mergedClsPrefix}-dialog__content` }, vue_1.renderSlot($slots, 'default', undefined, () => [_utils_1.render(content)])),
            vue_1.h("div", { class: `${mergedClsPrefix}-dialog__action` }, vue_1.renderSlot($slots, 'action', undefined, () => [
                negativeText ? (vue_1.h(button_1.NButton, { theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, ghost: true, size: "small", onClick: handleNegativeClick }, {
                    default: () => _utils_1.render(this.negativeText)
                })) : null,
                vue_1.h(button_1.NButton, { theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, disabled: loading, loading: loading, size: "small", type: type === 'default' ? 'primary' : type, onClick: handlePositiveClick }, {
                    default: () => _utils_1.render(this.positiveText)
                })
            ]))));
    }
});
