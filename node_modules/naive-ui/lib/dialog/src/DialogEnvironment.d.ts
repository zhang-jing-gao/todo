import { PropType } from 'vue';
export declare const exposedDialogEnvProps: {
    maskClosable: {
        type: BooleanConstructor;
        default: boolean;
    };
    onPositiveClick: PropType<(e: MouseEvent) => Promise<boolean> | boolean | unknown>;
    onNegativeClick: PropType<(e: MouseEvent) => Promise<boolean> | boolean | unknown>;
    onClose: PropType<() => Promise<boolean> | boolean | unknown>;
    icon: PropType<() => import("vue").VNodeChild>;
    type: {
        readonly type: PropType<"default" | "error" | "info" | "success" | "warning">;
        readonly default: "default";
    };
    title: PropType<string | (() => import("vue").VNodeChild)>;
    closable: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    negativeText: StringConstructor;
    positiveText: StringConstructor;
    content: PropType<string | (() => import("vue").VNodeChild)>;
    showIcon: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    loading: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    bordered: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    iconPlacement: PropType<import("./interface").IconPlacement>;
};
declare const _default: import("vue").DefineComponent<{
    internalKey: {
        type: StringConstructor;
        required: true;
    };
    to: PropType<string | HTMLElement>;
    onInternalAfterLeave: {
        type: PropType<(key: string) => void>;
        required: true;
    };
    maskClosable: {
        type: BooleanConstructor;
        default: boolean;
    };
    onPositiveClick: PropType<(e: MouseEvent) => unknown>;
    onNegativeClick: PropType<(e: MouseEvent) => unknown>;
    onClose: PropType<() => unknown>;
    icon: PropType<() => import("vue").VNodeChild>;
    type: {
        readonly type: PropType<"default" | "error" | "info" | "success" | "warning">;
        readonly default: "default";
    };
    title: PropType<string | (() => import("vue").VNodeChild)>;
    closable: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    negativeText: StringConstructor;
    positiveText: StringConstructor;
    content: PropType<string | (() => import("vue").VNodeChild)>;
    showIcon: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    loading: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    bordered: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    iconPlacement: PropType<import("./interface").IconPlacement>;
}, {
    show: import("vue").Ref<boolean>;
    hide: () => void;
    handleUpdateShow: (value: boolean) => void;
    handleAfterLeave: () => void;
    handleCloseClick: () => void;
    handleNegativeClick: (e: MouseEvent) => void;
    handlePositiveClick: (e: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    internalKey?: unknown;
    to?: unknown;
    onInternalAfterLeave?: unknown;
    maskClosable?: unknown;
    onPositiveClick?: unknown;
    onNegativeClick?: unknown;
    onClose?: unknown;
    icon?: unknown;
    type?: unknown;
    title?: unknown;
    closable?: unknown;
    negativeText?: unknown;
    positiveText?: unknown;
    content?: unknown;
    showIcon?: unknown;
    loading?: unknown;
    bordered?: unknown;
    iconPlacement?: unknown;
} & {
    type: "default" | "error" | "info" | "success" | "warning";
    bordered: boolean;
    loading: boolean;
    closable: boolean;
    showIcon: boolean;
    maskClosable: boolean;
    internalKey: string;
    onInternalAfterLeave: (key: string) => void;
} & {
    content?: string | (() => import("vue").VNodeChild) | undefined;
    icon?: (() => import("vue").VNodeChild) | undefined;
    title?: string | (() => import("vue").VNodeChild) | undefined;
    to?: string | HTMLElement | undefined;
    onClose?: (() => unknown) | undefined;
    iconPlacement?: import("./interface").IconPlacement | undefined;
    negativeText?: string | undefined;
    positiveText?: string | undefined;
    onPositiveClick?: ((e: MouseEvent) => unknown) | undefined;
    onNegativeClick?: ((e: MouseEvent) => unknown) | undefined;
}>, {
    type: "default" | "error" | "info" | "success" | "warning";
    bordered: boolean;
    loading: boolean;
    closable: boolean;
    showIcon: boolean;
    maskClosable: boolean;
}>;
export default _default;
