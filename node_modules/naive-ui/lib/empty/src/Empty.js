"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const icons_1 = require("../../_internal/icons");
const _mixins_1 = require("../../_mixins");
const _utils_1 = require("../../_utils");
const _internal_1 = require("../../_internal");
const styles_1 = require("../styles");
const index_cssr_1 = require("./styles/index.cssr");
const emptyProps = Object.assign(Object.assign({}, _mixins_1.useTheme.props), { description: {
        type: String,
        default: undefined
    }, showDescription: {
        type: Boolean,
        default: true
    }, size: {
        type: String,
        default: 'medium'
    } });
exports.default = vue_1.defineComponent({
    name: 'Empty',
    props: emptyProps,
    setup(props) {
        const { mergedClsPrefixRef } = _mixins_1.useConfig(props);
        const themeRef = _mixins_1.useTheme('Empty', 'Empty', index_cssr_1.default, styles_1.emptyLight, props, mergedClsPrefixRef);
        const { localeRef } = _mixins_1.useLocale('Empty');
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            localizedDescription: vue_1.computed(() => {
                return props.description || localeRef.value.description;
            }),
            cssVars: vue_1.computed(() => {
                const { size } = props;
                const { common: { cubicBezierEaseInOut }, self: { [_utils_1.createKey('iconSize', size)]: iconSize, [_utils_1.createKey('fontSize', size)]: fontSize, textColor, iconColor, extraTextColor } } = themeRef.value;
                return {
                    '--icon-size': iconSize,
                    '--font-size': fontSize,
                    '--bezier': cubicBezierEaseInOut,
                    '--text-color': textColor,
                    '--icon-color': iconColor,
                    '--extra-text-color': extraTextColor
                };
            })
        };
    },
    render() {
        const { $slots, mergedClsPrefix } = this;
        return (vue_1.h("div", { class: `${mergedClsPrefix}-empty`, style: this.cssVars },
            vue_1.h("div", { class: `${mergedClsPrefix}-empty__icon` }, vue_1.renderSlot($slots, 'icon', undefined, () => [
                vue_1.h(_internal_1.NBaseIcon, { clsPrefix: mergedClsPrefix }, { default: () => vue_1.h(icons_1.EmptyIcon, null) })
            ])),
            this.showDescription ? (vue_1.h("div", { class: `${mergedClsPrefix}-empty__description` }, vue_1.renderSlot($slots, 'default', undefined, () => [
                this.localizedDescription
            ]))) : null,
            $slots.extra ? (vue_1.h("div", { class: `${mergedClsPrefix}-empty__extra` }, vue_1.renderSlot($slots, 'extra'))) : null));
    }
});
