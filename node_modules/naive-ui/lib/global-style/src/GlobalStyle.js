"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const _utils_1 = require("../../_utils");
const common_1 = require("../../_styles/common");
const ConfigProvider_1 = require("../../config-provider/src/ConfigProvider");
const lodash_1 = require("lodash");
exports.default = vue_1.defineComponent({
    name: 'GlobalStyle',
    setup() {
        const NConfigProvider = vue_1.inject(ConfigProvider_1.configProviderInjectionKey, null);
        const { body } = document;
        const { style } = body;
        let styleApplied = false;
        vue_1.onBeforeMount(() => {
            vue_1.watchEffect(() => {
                var _a, _b;
                const { textColor2, fontSize, fontFamily, bodyColor, cubicBezierEaseInOut, lineHeight } = NConfigProvider
                    ? lodash_1.merge({}, ((_a = NConfigProvider.mergedThemeRef.value) === null || _a === void 0 ? void 0 : _a.common) || common_1.commonLight, (_b = NConfigProvider.mergedThemeOverridesRef.value) === null || _b === void 0 ? void 0 : _b.common)
                    : common_1.commonLight;
                if (styleApplied || !body.hasAttribute('n-styled')) {
                    body.setAttribute('n-styled', '');
                    styleApplied = true;
                    style.backgroundColor = bodyColor;
                    style.color = textColor2;
                    style.fontSize = fontSize;
                    style.fontFamily = fontFamily;
                    style.lineHeight = lineHeight;
                    style.transition = `color .3s ${cubicBezierEaseInOut}, background-color .3s ${cubicBezierEaseInOut}`;
                }
                else if (process.env.NODE_ENV !== 'production') {
                    _utils_1.warn('global-style', 'More than one n-global-style exist in the document.body. Only the first mounted one will work.');
                }
            });
        });
        vue_1.onUnmounted(() => {
            if (styleApplied) {
                body.removeAttribute('n-styled');
            }
        });
    },
    render() {
        return null;
    }
});
