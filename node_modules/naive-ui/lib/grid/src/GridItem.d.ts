import { CSSProperties, PropType } from 'vue';
import type { ExtractPublicPropTypes } from '../../_utils';
export declare const defaultSpan = 1;
export declare const gridItemProps: {
    readonly span: {
        readonly type: PropType<string | number>;
        readonly default: 1;
    };
    readonly offset: {
        readonly type: PropType<string | number>;
        readonly default: 0;
    };
    readonly suffix: BooleanConstructor;
    readonly privateOffset: NumberConstructor;
    readonly privateSpan: NumberConstructor;
    readonly privateColStart: NumberConstructor;
    readonly privateShow: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
};
export declare const gridItemPropKeys: ("span" | "offset" | "suffix" | "privateOffset" | "privateSpan" | "privateColStart" | "privateShow")[];
export declare type GridItemProps = ExtractPublicPropTypes<typeof gridItemProps>;
declare const _default: import("vue").DefineComponent<{
    readonly span: {
        readonly type: PropType<string | number>;
        readonly default: 1;
    };
    readonly offset: {
        readonly type: PropType<string | number>;
        readonly default: 0;
    };
    readonly suffix: BooleanConstructor;
    readonly privateOffset: NumberConstructor;
    readonly privateSpan: NumberConstructor;
    readonly privateColStart: NumberConstructor;
    readonly privateShow: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
}, {
    overflow: import("vue").Ref<boolean>;
    itemStyle: import("vue").Ref<string | CSSProperties | undefined>;
    deriveStyle: () => {
        display: string;
        gridColumn: string;
        marginLeft: string;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly span?: unknown;
    readonly offset?: unknown;
    readonly suffix?: unknown;
    readonly privateOffset?: unknown;
    readonly privateSpan?: unknown;
    readonly privateColStart?: unknown;
    readonly privateShow?: unknown;
} & {
    span: string | number;
    offset: string | number;
    suffix: boolean;
    privateShow: boolean;
} & {
    privateOffset?: number | undefined;
    privateSpan?: number | undefined;
    privateColStart?: number | undefined;
}>, {
    span: string | number;
    offset: string | number;
    suffix: boolean;
    privateShow: boolean;
}>;
export default _default;
