"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.colPropKeys = exports.colProps = void 0;
const vue_1 = require("vue");
const _utils_1 = require("../../_utils");
const _mixins_1 = require("../../_mixins");
const Row_1 = require("./Row");
const index_cssr_1 = require("./styles/index.cssr");
exports.colProps = {
    span: {
        type: [String, Number],
        default: 1
    },
    push: {
        type: [String, Number],
        default: 0
    },
    pull: {
        type: [String, Number],
        default: 0
    },
    offset: {
        type: [String, Number],
        default: 0
    }
};
exports.colPropKeys = _utils_1.keysOf(exports.colProps);
exports.default = vue_1.defineComponent({
    name: 'Col',
    props: exports.colProps,
    setup(props) {
        _mixins_1.useStyle('Grid', index_cssr_1.default);
        const NRow = vue_1.inject(Row_1.rowInjectionKey, null);
        if (!NRow)
            _utils_1.throwError('col', '`n-col` must be placed inside `n-row`.');
        return {
            mergedClsPrefix: NRow.mergedClsPrefixRef,
            gutter: NRow.gutterRef,
            stylePadding: vue_1.computed(() => `${_utils_1.formatLength(NRow.verticalGutterRef.value, {
                c: 0.5
            })} ${_utils_1.formatLength(NRow.horizontalGutterRef.value, { c: 0.5 })}`),
            mergedPush: vue_1.computed(() => Number(props.push) - Number(props.pull))
        };
    },
    render() {
        const { $slots, span, mergedPush, offset, stylePadding, gutter, mergedClsPrefix } = this;
        return (vue_1.h("div", { class: [
                `${mergedClsPrefix}-col`,
                {
                    [`${mergedClsPrefix}-col--${span}-span`]: true,
                    [`${mergedClsPrefix}-col--${mergedPush}-push`]: mergedPush > 0,
                    [`${mergedClsPrefix}-col--${-mergedPush}-pull`]: mergedPush < 0,
                    [`${mergedClsPrefix}-col--${offset}-offset`]: offset
                }
            ], style: {
                padding: stylePadding
            } }, gutter ? vue_1.h("div", null, $slots) : $slots));
    }
});
