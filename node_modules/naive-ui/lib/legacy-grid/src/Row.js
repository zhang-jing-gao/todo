"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rowPropKeys = exports.rowProps = exports.rowInjectionKey = void 0;
const vue_1 = require("vue");
const vooks_1 = require("vooks");
const _utils_1 = require("../../_utils");
const _mixins_1 = require("../../_mixins");
const index_cssr_1 = require("./styles/index.cssr");
exports.rowInjectionKey = Symbol('row');
exports.rowProps = {
    gutter: {
        type: [Array, Number, String],
        default: 0
    },
    alignItems: String,
    justifyContent: String
};
exports.rowPropKeys = _utils_1.keysOf(exports.rowProps);
exports.default = vue_1.defineComponent({
    name: 'Row',
    props: exports.rowProps,
    setup(props) {
        const { mergedClsPrefixRef } = _mixins_1.useConfig(props);
        _mixins_1.useStyle('LegacyGrid', index_cssr_1.default, mergedClsPrefixRef);
        const verticalGutterRef = vooks_1.useMemo(() => {
            const { gutter } = props;
            if (Array.isArray(gutter)) {
                return gutter[1] || 0;
            }
            return 0;
        });
        const horizontalGutterRef = vooks_1.useMemo(() => {
            const { gutter } = props;
            if (Array.isArray(gutter)) {
                return gutter[0];
            }
            return Number(gutter);
        });
        vue_1.provide(exports.rowInjectionKey, {
            mergedClsPrefixRef,
            gutterRef: vue_1.toRef(props, 'gutter'),
            verticalGutterRef: verticalGutterRef,
            horizontalGutterRef: horizontalGutterRef
        });
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            styleMargin: vooks_1.useMemo(() => `-${_utils_1.formatLength(verticalGutterRef.value, {
                c: 0.5
            })} -${_utils_1.formatLength(horizontalGutterRef.value, { c: 0.5 })}`),
            styleWidth: vooks_1.useMemo(() => `calc(100% + ${_utils_1.formatLength(horizontalGutterRef.value)})`)
        };
    },
    render() {
        return (vue_1.h("div", { class: `${this.mergedClsPrefix}-row`, style: {
                margin: this.styleMargin,
                width: this.styleWidth,
                alignItems: this.alignItems,
                justifyContent: this.justifyContent
            } }, this.$slots));
    }
});
