"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadingBarApiInjectionKey = exports.loadingBarProviderInjectionKey = void 0;
const vue_1 = require("vue");
const vooks_1 = require("vooks");
const _mixins_1 = require("../../_mixins");
const LoadingBar_1 = require("./LoadingBar");
const loadingBarProps = Object.assign(Object.assign({}, _mixins_1.useTheme.props), { to: {
        type: [String, Object],
        default: undefined
    } });
exports.loadingBarProviderInjectionKey = Symbol('loadingBar');
exports.loadingBarApiInjectionKey = Symbol('loadingBarApi');
exports.default = vue_1.defineComponent({
    name: 'LoadingBarProvider',
    props: loadingBarProps,
    setup(props) {
        const isMountedRef = vooks_1.useIsMounted();
        const loadingBarRef = vue_1.ref(null);
        const methods = {
            start() {
                var _a;
                if (isMountedRef.value) {
                    (_a = loadingBarRef.value) === null || _a === void 0 ? void 0 : _a.start();
                }
                else {
                    void vue_1.nextTick(() => {
                        var _a;
                        (_a = loadingBarRef.value) === null || _a === void 0 ? void 0 : _a.start();
                    });
                }
            },
            error() {
                var _a;
                if (isMountedRef.value) {
                    (_a = loadingBarRef.value) === null || _a === void 0 ? void 0 : _a.error();
                }
                else {
                    void vue_1.nextTick(() => {
                        var _a;
                        (_a = loadingBarRef.value) === null || _a === void 0 ? void 0 : _a.error();
                    });
                }
            },
            finish() {
                var _a;
                if (isMountedRef.value) {
                    (_a = loadingBarRef.value) === null || _a === void 0 ? void 0 : _a.finish();
                }
                else {
                    void vue_1.nextTick(() => {
                        var _a;
                        (_a = loadingBarRef.value) === null || _a === void 0 ? void 0 : _a.finish();
                    });
                }
            }
        };
        const { mergedClsPrefixRef } = _mixins_1.useConfig(props);
        vue_1.provide(exports.loadingBarApiInjectionKey, methods);
        vue_1.provide(exports.loadingBarProviderInjectionKey, {
            props,
            mergedClsPrefixRef
        });
        return Object.assign(methods, {
            loadingBarRef
        });
    },
    render() {
        var _a;
        return (vue_1.h(vue_1.Fragment, null,
            vue_1.h(vue_1.Teleport, { to: (_a = this.to) !== null && _a !== void 0 ? _a : 'body' },
                vue_1.h(LoadingBar_1.default, { ref: "loadingBarRef" })),
            vue_1.renderSlot(this.$slots, 'default')));
    }
});
