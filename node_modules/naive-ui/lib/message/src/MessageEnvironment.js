"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const _internal_1 = require("../../_internal");
const Message_1 = require("./Message");
const message_props_1 = require("./message-props");
exports.default = vue_1.defineComponent({
    name: 'MessageEnvironment',
    props: Object.assign(Object.assign({}, message_props_1.messageProps), { duration: {
            type: Number,
            default: 3000
        }, onAfterLeave: Function, onLeave: Function, internalKey: {
            type: String,
            required: true
        }, 
        // private
        onInternalAfterLeave: Function, 
        // deprecated
        onHide: Function, onAfterHide: Function }),
    setup(props) {
        const timerIdRef = vue_1.ref(null);
        const showRef = vue_1.ref(true);
        vue_1.onMounted(() => {
            const { duration } = props;
            if (duration) {
                timerIdRef.value = window.setTimeout(hide, duration);
            }
        });
        function hide() {
            const { value: timerId } = timerIdRef;
            const { onHide } = props;
            showRef.value = false;
            if (timerId) {
                window.clearTimeout(timerId);
            }
            // deprecated
            if (onHide)
                onHide();
        }
        function handleClose() {
            const { onClose } = props;
            if (onClose)
                onClose();
            hide();
        }
        function handleAfterLeave() {
            const { onAfterLeave, onInternalAfterLeave, onAfterHide, internalKey } = props;
            if (onAfterLeave)
                onAfterLeave();
            if (onInternalAfterLeave)
                onInternalAfterLeave(internalKey);
            // deprecated
            if (onAfterHide)
                onAfterHide();
        }
        // deprecated
        function deactivate() {
            hide();
        }
        return {
            show: showRef,
            hide,
            handleClose,
            handleAfterLeave,
            deactivate
        };
    },
    render() {
        return (vue_1.h(_internal_1.NFadeInExpandTransition, { appear: true, onAfterLeave: this.handleAfterLeave, onLeave: this.onLeave }, {
            default: () => [
                this.show ? (vue_1.h(Message_1.default, { content: this.content, type: this.type, icon: this.icon, closable: this.closable, onClose: this.handleClose })) : null
            ]
        }));
    }
});
