"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.notificationPropKeys = exports.notificationProps = void 0;
const vue_1 = require("vue");
const seemly_1 = require("seemly");
const _utils_1 = require("../../_utils");
const _internal_1 = require("../../_internal");
const icons_1 = require("../../_internal/icons");
const NotificationProvider_1 = require("./NotificationProvider");
const iconMap = {
    info: vue_1.h(icons_1.InfoIcon, null),
    success: vue_1.h(icons_1.SuccessIcon, null),
    warning: vue_1.h(icons_1.WarningIcon, null),
    error: vue_1.h(icons_1.ErrorIcon, null),
    default: null
};
exports.notificationProps = {
    closable: {
        type: Boolean,
        default: true
    },
    type: {
        type: String,
        default: 'default'
    },
    avatar: Function,
    // BUG
    // Wired Case, can't be set to [String, Function] as PropType<string | (() => VNodeChild)>,
    title: [String, Function],
    description: [String, Function],
    content: [String, Function],
    meta: [String, Function],
    action: [String, Function],
    onClose: {
        type: Function,
        required: true
    }
};
exports.notificationPropKeys = _utils_1.keysOf(exports.notificationProps);
exports.default = vue_1.defineComponent({
    name: 'Notification',
    props: exports.notificationProps,
    setup(props) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const { mergedClsPrefixRef, mergedThemeRef } = vue_1.inject(NotificationProvider_1.notificationProviderInjectionKey);
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            showAvatar: vue_1.computed(() => {
                return props.avatar || props.type !== 'default';
            }),
            handleCloseClick() {
                props.onClose();
            },
            cssVars: vue_1.computed(() => {
                const { type } = props;
                const { self: { color, textColor, closeColor, closeColorHover, closeColorPressed, headerTextColor, descriptionTextColor, actionTextColor, borderRadius, headerFontWeight, boxShadow, lineHeight, fontSize, closeMargin, closeSize, width, padding, [_utils_1.createKey('iconColor', type)]: iconColor }, common: { cubicBezierEaseOut, cubicBezierEaseIn, cubicBezierEaseInOut } } = mergedThemeRef.value;
                const { left, right, top, bottom } = seemly_1.getPadding(padding);
                return {
                    '--color': color,
                    '--font-size': fontSize,
                    '--text-color': textColor,
                    '--description-text-color': descriptionTextColor,
                    '--action-text-color': actionTextColor,
                    '--title-text-color': headerTextColor,
                    '--title-font-weight': headerFontWeight,
                    '--bezier': cubicBezierEaseInOut,
                    '--bezier-ease-out': cubicBezierEaseOut,
                    '--bezier-ease-in': cubicBezierEaseIn,
                    '--border-radius': borderRadius,
                    '--box-shadow': boxShadow,
                    '--close-color': closeColor,
                    '--close-color-hover': closeColorHover,
                    '--close-color-pressed': closeColorPressed,
                    '--line-height': lineHeight,
                    '--icon-color': iconColor,
                    '--close-margin': closeMargin,
                    '--close-size': closeSize,
                    '--width': width,
                    '--padding-left': left,
                    '--padding-right': right,
                    '--padding-top': top,
                    '--padding-bottom': bottom
                };
            })
        };
    },
    render() {
        const { mergedClsPrefix } = this;
        return (vue_1.h("div", { class: [
                `${mergedClsPrefix}-notification`,
                {
                    [`${mergedClsPrefix}-notification--closable`]: this.closable,
                    [`${mergedClsPrefix}-notification--show-avatar`]: this.showAvatar
                }
            ], style: this.cssVars },
            this.showAvatar ? (vue_1.h("div", { class: `${mergedClsPrefix}-notification__avatar` }, this.avatar ? (_utils_1.render(this.avatar)) : this.type !== 'default' ? (vue_1.h(_internal_1.NBaseIcon, { clsPrefix: mergedClsPrefix }, { default: () => iconMap[this.type] })) : null)) : null,
            this.closable ? (vue_1.h(_internal_1.NBaseClose, { clsPrefix: mergedClsPrefix, class: `${mergedClsPrefix}-notification__close`, onClick: this.handleCloseClick })) : null,
            vue_1.h("div", { ref: "bodyRef", class: `${mergedClsPrefix}-notification-main` },
                this.title ? (vue_1.h("div", { class: `${mergedClsPrefix}-notification-main__header` }, _utils_1.render(this.title))) : null,
                this.description ? (vue_1.h("div", { class: `${mergedClsPrefix}-notification-main__description` }, _utils_1.render(this.description))) : null,
                this.content ? (vue_1.h("pre", { class: `${mergedClsPrefix}-notification-main__content` }, _utils_1.render(this.content))) : null,
                this.meta || this.action ? (vue_1.h("div", { class: `${mergedClsPrefix}-notification-main-footer` },
                    this.meta ? (vue_1.h("div", { class: `${mergedClsPrefix}-notification-main-footer__meta` }, _utils_1.render(this.meta))) : null,
                    this.action ? (vue_1.h("div", { class: `${mergedClsPrefix}-notification-main-footer__action` }, _utils_1.render(this.action))) : null)) : null)));
    }
});
