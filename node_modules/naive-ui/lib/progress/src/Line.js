"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const _utils_1 = require("../../_utils");
const _internal_1 = require("../../_internal");
const icons_1 = require("../../_internal/icons");
const iconMap = {
    success: vue_1.h(icons_1.SuccessIcon, null),
    error: vue_1.h(icons_1.ErrorIcon, null),
    warning: vue_1.h(icons_1.WarningIcon, null),
    info: vue_1.h(icons_1.InfoIcon, null)
};
exports.default = vue_1.defineComponent({
    name: 'ProgressLine',
    props: {
        clsPrefix: {
            type: String,
            required: true
        },
        percentage: {
            type: Number,
            required: true
        },
        railColor: String,
        railStyle: [String, Object],
        fillColor: String,
        status: {
            type: String,
            required: true
        },
        indicatorPlacement: {
            type: String,
            required: true
        },
        indicatorTextColor: String,
        unit: String,
        processing: {
            type: Boolean,
            required: true
        },
        showIndicator: {
            type: Boolean,
            required: true
        },
        height: [String, Number],
        railBorderRadius: [String, Number],
        fillBorderRadius: [String, Number]
    },
    setup(props, { slots }) {
        const styleHeightRef = vue_1.computed(() => {
            return _utils_1.formatLength(props.height);
        });
        const styleRailBorderRadiusRef = vue_1.computed(() => {
            if (props.railBorderRadius !== undefined) {
                return _utils_1.formatLength(props.railBorderRadius);
            }
            if (props.height !== undefined) {
                return _utils_1.formatLength(props.height, { c: 0.5 });
            }
            return '';
        });
        const styleFillBorderRadiusRef = vue_1.computed(() => {
            if (props.fillBorderRadius !== undefined) {
                return _utils_1.formatLength(props.fillBorderRadius);
            }
            if (props.railBorderRadius !== undefined) {
                return _utils_1.formatLength(props.railBorderRadius);
            }
            if (props.height !== undefined) {
                return _utils_1.formatLength(props.height, { c: 0.5 });
            }
            return '';
        });
        return () => {
            const { indicatorPlacement, railColor, railStyle, percentage, unit, indicatorTextColor, status, showIndicator, fillColor, processing, clsPrefix } = props;
            return (vue_1.h("div", { class: `${clsPrefix}-progress-content`, role: "none" },
                vue_1.h("div", { class: `${clsPrefix}-progress-graph`, "aria-hidden": true },
                    vue_1.h("div", { class: [
                            `${clsPrefix}-progress-graph-line`,
                            {
                                [`${clsPrefix}-progress-graph-line--indicator-${indicatorPlacement}`]: true
                            }
                        ] },
                        vue_1.h("div", { class: `${clsPrefix}-progress-graph-line-rail`, style: [
                                {
                                    backgroundColor: railColor,
                                    height: styleHeightRef.value,
                                    borderRadius: styleRailBorderRadiusRef.value
                                },
                                railStyle
                            ] },
                            vue_1.h("div", { class: [
                                    `${clsPrefix}-progress-graph-line-fill`,
                                    processing &&
                                        `${clsPrefix}-progress-graph-line-fill--processing`
                                ], style: {
                                    maxWidth: `${props.percentage}%`,
                                    backgroundColor: fillColor,
                                    height: styleHeightRef.value,
                                    borderRadius: styleFillBorderRadiusRef.value
                                } }, indicatorPlacement === 'inside' ? (vue_1.h("div", { class: `${clsPrefix}-progress-graph-line-indicator` }, `${percentage}${unit || ''}`)) : null)))),
                showIndicator && indicatorPlacement === 'outside' ? (vue_1.h("div", null, slots.default ? (vue_1.h("div", { class: `${clsPrefix}-progress-custom-content`, style: {
                        color: indicatorTextColor
                    }, role: "none" }, slots.default())) : status === 'default' ? (vue_1.h("div", { role: "none", class: `${clsPrefix}-progress-icon ${clsPrefix}-progress-icon--as-text`, style: {
                        color: indicatorTextColor
                    } },
                    percentage,
                    unit)) : (vue_1.h("div", { class: `${clsPrefix}-progress-icon`, "aria-hidden": true },
                    vue_1.h(_internal_1.NBaseIcon, { clsPrefix: clsPrefix }, { default: () => iconMap[status] }))))) : null));
        };
    }
});
