"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const vooks_1 = require("vooks");
const _internal_1 = require("../../_internal");
const _mixins_1 = require("../../_mixins");
const _utils_1 = require("../../_utils");
const styles_1 = require("../styles");
const index_cssr_1 = require("./styles/index.cssr");
const StarIcon_1 = require("./StarIcon");
const rateProps = Object.assign(Object.assign({}, _mixins_1.useTheme.props), { count: {
        type: Number,
        default: 5
    }, value: Number, defaultValue: {
        type: Number,
        default: 0
    }, size: {
        type: [String, Number],
        default: 'medium'
    }, color: String, 
    // eslint-disable-next-line vue/prop-name-casing
    'onUpdate:value': [Function, Array], onUpdateValue: [Function, Array] });
exports.default = vue_1.defineComponent({
    name: 'Rate',
    props: rateProps,
    setup(props) {
        const { mergedClsPrefixRef } = _mixins_1.useConfig(props);
        const themeRef = _mixins_1.useTheme('Rate', 'Rate', index_cssr_1.default, styles_1.rateLight, props, mergedClsPrefixRef);
        const controlledValueRef = vue_1.toRef(props, 'value');
        const uncontrolledValueRef = vue_1.ref(props.defaultValue);
        const hoverIndexRef = vue_1.ref(null);
        const formItem = _mixins_1.useFormItem(props);
        function doUpdateValue(value) {
            const { 'onUpdate:value': _onUpdateValue, onUpdateValue } = props;
            const { nTriggerFormChange, nTriggerFormInput } = formItem;
            if (_onUpdateValue) {
                _utils_1.call(_onUpdateValue, value);
            }
            if (onUpdateValue) {
                _utils_1.call(onUpdateValue, value);
            }
            uncontrolledValueRef.value = value;
            nTriggerFormChange();
            nTriggerFormInput();
        }
        function handleMouseEnter(index) {
            hoverIndexRef.value = index;
        }
        function handleMouseLeave() {
            hoverIndexRef.value = null;
        }
        function handleClick(index) {
            doUpdateValue(index + 1);
        }
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            mergedValue: vooks_1.useMergedState(controlledValueRef, uncontrolledValueRef),
            hoverIndex: hoverIndexRef,
            handleMouseEnter,
            handleClick,
            handleMouseLeave,
            cssVars: vue_1.computed(() => {
                const { size } = props;
                const { common: { cubicBezierEaseInOut }, self } = themeRef.value;
                const { itemColor, itemColorActive } = self;
                let mergedSize;
                if (typeof size === 'number') {
                    mergedSize = `${size}px`;
                }
                else {
                    mergedSize = self[_utils_1.createKey('size', size)];
                }
                return {
                    '--bezier': cubicBezierEaseInOut,
                    '--item-color': itemColor,
                    '--item-color-active': props.color || itemColorActive,
                    '--item-size': mergedSize
                };
            })
        };
    },
    render() {
        const { hoverIndex, mergedValue, mergedClsPrefix, $slots: { default: defaultSlot } } = this;
        return (vue_1.h("div", { class: `${mergedClsPrefix}-rate`, style: this.cssVars, onMouseleave: this.handleMouseLeave }, vue_1.renderList(this.count, (_, index) => (vue_1.h("div", { key: index, class: [
                `${mergedClsPrefix}-rate__item`,
                {
                    [`${mergedClsPrefix}-rate__item--active`]: hoverIndex !== null
                        ? index <= hoverIndex
                        : index < mergedValue
                }
            ], onClick: () => this.handleClick(index), onMouseenter: () => this.handleMouseEnter(index) }, defaultSlot ? (defaultSlot()) : (vue_1.h(_internal_1.NBaseIcon, { clsPrefix: mergedClsPrefix }, { default: () => StarIcon_1.default })))))));
    }
});
