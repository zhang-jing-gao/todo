"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const icons_1 = require("../../_internal/icons");
const _internal_1 = require("../../_internal");
const _utils_1 = require("../../_utils");
const Steps_1 = require("./Steps");
const stepProps = {
    status: String,
    title: String,
    description: String,
    // index will be filled by parent steps, not user
    internalIndex: {
        type: Number,
        required: true
    }
};
exports.default = vue_1.defineComponent({
    name: 'Step',
    props: stepProps,
    setup(props) {
        const NSteps = vue_1.inject(Steps_1.stepsInjectionKey, null);
        if (!NSteps)
            _utils_1.throwError('step', '`n-step` must be placed inside `n-steps`.');
        const { props: stepsProps, mergedThemeRef, mergedClsPrefixRef, stepsSlots } = NSteps;
        const verticalRef = vue_1.computed(() => {
            return stepsProps.vertical;
        });
        const mergedStatusRef = vue_1.computed(() => {
            const { status } = props;
            if (status) {
                return status;
            }
            else {
                const { internalIndex } = props;
                const { current } = stepsProps;
                if (current === undefined)
                    return 'process';
                if (internalIndex < current) {
                    return 'finish';
                }
                else if (internalIndex === current) {
                    return stepsProps.status || 'process';
                }
                else if (internalIndex > current) {
                    return 'wait';
                }
            }
            return 'process';
        });
        return {
            stepsSlots,
            mergedClsPrefix: mergedClsPrefixRef,
            vertical: verticalRef,
            mergedStatus: mergedStatusRef,
            cssVars: vue_1.computed(() => {
                const { value: status } = mergedStatusRef;
                const { size } = stepsProps;
                const { common: { cubicBezierEaseInOut }, self: { stepHeaderFontWeight, [_utils_1.createKey('stepHeaderFontSize', size)]: stepHeaderFontSize, [_utils_1.createKey('indicatorIndexFontSize', size)]: indicatorIndexFontSize, [_utils_1.createKey('indicatorSize', size)]: indicatorSize, [_utils_1.createKey('indicatorIconSize', size)]: indicatorIconSize, [_utils_1.createKey('indicatorTextColor', status)]: indicatorTextColor, [_utils_1.createKey('indicatorBorderColor', status)]: indicatorBorderColor, [_utils_1.createKey('headerTextColor', status)]: headerTextColor, [_utils_1.createKey('splitorColor', status)]: splitorColor, [_utils_1.createKey('indicatorColor', status)]: indicatorColor, [_utils_1.createKey('descriptionTextColor', status)]: descriptionTextColor } } = mergedThemeRef.value;
                return {
                    '--bezier': cubicBezierEaseInOut,
                    '--description-text-color': descriptionTextColor,
                    '--header-text-color': headerTextColor,
                    '--indicator-border-color': indicatorBorderColor,
                    '--indicator-color': indicatorColor,
                    '--indicator-icon-size': indicatorIconSize,
                    '--indicator-index-font-size': indicatorIndexFontSize,
                    '--indicator-size': indicatorSize,
                    '--indicator-text-color': indicatorTextColor,
                    '--splitor-color': splitorColor,
                    '--step-header-font-size': stepHeaderFontSize,
                    '--step-header-font-weight': stepHeaderFontWeight
                };
            })
        };
    },
    render() {
        const showDescription = this.description !== undefined || this.$slots.default;
        const { mergedClsPrefix } = this;
        return (vue_1.h("div", { class: [
                `${mergedClsPrefix}-step`,
                showDescription && `${mergedClsPrefix}-step--show-description`
            ], style: this.cssVars },
            vue_1.h("div", { class: `${mergedClsPrefix}-step-indicator` },
                vue_1.h("div", { class: `${mergedClsPrefix}-step-indicator-slot` },
                    vue_1.h(_internal_1.NIconSwitchTransition, null, {
                        default: () => {
                            const { mergedStatus, stepsSlots } = this;
                            return !(mergedStatus === 'finish' || mergedStatus === 'error') ? (vue_1.h("div", { key: this.internalIndex, class: `${mergedClsPrefix}-step-indicator-slot__index` }, this.internalIndex)) : mergedStatus === 'finish' ? (vue_1.h(_internal_1.NBaseIcon, { clsPrefix: mergedClsPrefix, key: "finish" }, {
                                default: () => vue_1.renderSlot(stepsSlots, 'finish-icon', undefined, () => [vue_1.h(icons_1.CheckmarkIcon, null)])
                            })) : mergedStatus === 'error' ? (vue_1.h(_internal_1.NBaseIcon, { clsPrefix: mergedClsPrefix, key: "error" }, {
                                default: () => vue_1.renderSlot(stepsSlots, 'error-icon', undefined, () => [vue_1.h(icons_1.CloseIcon, null)])
                            })) : null;
                        }
                    })),
                this.vertical ? (vue_1.h("div", { class: `${mergedClsPrefix}-step-splitor` })) : null),
            vue_1.h("div", { class: `${mergedClsPrefix}-step-content` },
                vue_1.h("div", { class: `${mergedClsPrefix}-step-content-header` },
                    vue_1.h("div", { class: `${mergedClsPrefix}-step-content-header__title` }, this.title),
                    !this.vertical ? (vue_1.h("div", { class: `${mergedClsPrefix}-step-splitor` })) : null),
                showDescription ? (vue_1.h("div", { class: `${mergedClsPrefix}-step-content__description` }, vue_1.renderSlot(this.$slots, 'default', undefined, () => [
                    this.description
                ]))) : null)));
    }
});
