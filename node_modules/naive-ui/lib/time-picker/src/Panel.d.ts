import { PropType } from 'vue';
import { IsHourDisabled, IsMinuteDisabled, IsSecondDisabled } from './interface';
import { Item } from './PanelCol';
declare const _default: import("vue").DefineComponent<{
    showHour: {
        type: BooleanConstructor;
        default: boolean;
    };
    showMinute: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSecond: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPeriod: {
        type: BooleanConstructor;
        default: boolean;
    };
    isHourInvalid: {
        type: BooleanConstructor;
        default: boolean;
    };
    isMinuteInvalid: {
        type: BooleanConstructor;
        default: boolean;
    };
    isSecondInvalid: {
        type: BooleanConstructor;
        default: boolean;
    };
    isValueInvalid: {
        type: BooleanConstructor;
        default: boolean;
    };
    hourValue: {
        type: PropType<number | null>;
        default: null;
    };
    minuteValue: {
        type: PropType<number | null>;
        default: null;
    };
    secondValue: {
        type: PropType<number | null>;
        default: null;
    };
    isHourDisabled: PropType<IsHourDisabled>;
    isMinuteDisabled: PropType<IsMinuteDisabled>;
    isSecondDisabled: PropType<IsSecondDisabled>;
    onHourClick: {
        type: PropType<(value: number) => void>;
        required: true;
    };
    onMinuteClick: {
        type: PropType<(value: number) => void>;
        required: true;
    };
    onSecondClick: {
        type: PropType<(value: number) => void>;
        required: true;
    };
    onNowClick: PropType<() => void>;
    nowText: StringConstructor;
    confirmText: StringConstructor;
    transitionDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    onConfirmClick: PropType<() => void>;
    onFocusin: PropType<(e: FocusEvent) => void>;
    onFocusout: PropType<(e: FocusEvent) => void>;
    onFocusDetectorFocus: PropType<() => void>;
    onKeydown: PropType<(e: KeyboardEvent) => void>;
}, {
    mergedTheme: import("vue").Ref<{
        common: {
            baseColor: string;
            primaryColor: string;
            primaryColorHover: string;
            primaryColorPressed: string;
            primaryColorSuppl: string;
            infoColor: string;
            infoColorHover: string;
            infoColorPressed: string;
            infoColorSuppl: string;
            successColor: string;
            successColorHover: string;
            successColorPressed: string;
            successColorSuppl: string;
            warningColor: string;
            warningColorHover: string;
            warningColorPressed: string;
            warningColorSuppl: string;
            errorColor: string;
            errorColorHover: string;
            errorColorPressed: string;
            errorColorSuppl: string;
            textColorBase: string;
            textColor1: string;
            textColor2: string;
            textColor3: string;
            textColorDisabled: string;
            placeholderColor: string;
            placeholderColorDisabled: string;
            iconColor: string;
            iconColorHover: string;
            iconColorPressed: string;
            iconColorDisabled: string;
            opacity1: string;
            opacity2: string;
            opacity3: string;
            opacity4: string;
            opacity5: string;
            dividerColor: string;
            borderColor: string;
            closeColor: string;
            closeColorHover: string;
            closeColorPressed: string;
            closeColorDisabled: string;
            clearColor: string;
            clearColorHover: string;
            clearColorPressed: string;
            scrollbarColor: string;
            scrollbarColorHover: string;
            progressRailColor: string;
            railColor: string;
            popoverColor: string;
            tableColor: string;
            cardColor: string;
            modalColor: string;
            bodyColor: string;
            tagColor: string;
            avatarColor: string;
            invertedColor: string;
            inputColor: string;
            codeColor: string;
            tabColor: string;
            actionColor: string;
            tableHeaderColor: string;
            hoverColor: string;
            tableColorHover: string;
            pressedColor: string;
            opacityDisabled: string;
            inputColorDisabled: string;
            boxShadow1: string;
            boxShadow2: string;
            boxShadow3: string;
            fontFamily: string;
            fontFamilyMono: string;
            fontWeight: string;
            fontWeightStrong: string;
            cubicBezierEaseInOut: string;
            cubicBezierEaseOut: string;
            cubicBezierEaseIn: string;
            borderRadius: string;
            borderRadiusSmall: string;
            fontSize: string;
            fontSizeTiny: string;
            fontSizeSmall: string;
            fontSizeMedium: string;
            fontSizeLarge: string;
            fontSizeHuge: string;
            lineHeight: string;
            heightTiny: string;
            heightSmall: string;
            heightMedium: string;
            heightLarge: string;
            heightHuge: string;
            transformDebounceScale: string;
            name: "common";
        };
        self: {
            panelColor: string;
            panelBoxShadow: string;
            panelDividerColor: string;
            itemTextColor: string;
            itemTextColorActive: string;
            itemColorHover: string;
            itemOpacityDisabled: string;
            borderRadius: string;
            iconColor: string;
            iconColorDisabled: string;
            itemFontSize: string;
            itemHeight: string;
            itemWidth: string;
            panelActionPadding: string;
        };
        peers: {
            Scrollbar: import("../../_mixins").Theme<"Scrollbar", {
                color: string;
                colorHover: string;
            }, any>;
            Button: import("../../_mixins").Theme<"Button", {
                heightTiny: string;
                heightSmall: string;
                heightMedium: string;
                heightLarge: string;
                borderRadiusTiny: string;
                borderRadiusSmall: string;
                borderRadiusMedium: string;
                borderRadiusLarge: string;
                fontSizeTiny: string;
                fontSizeSmall: string;
                fontSizeMedium: string;
                fontSizeLarge: string;
                opacityDisabled: string;
                color: string;
                colorHover: string;
                colorPressed: string;
                colorFocus: string;
                colorDisabled: string;
                textColor: string;
                textColorHover: string;
                textColorPressed: string;
                textColorFocus: string;
                textColorDisabled: string;
                textColorText: string;
                textColorTextDepth1: string;
                textColorTextDepth2: string;
                textColorTextDepth3: string;
                textColorTextHover: string;
                textColorTextPressed: string;
                textColorTextFocus: string;
                textColorTextDisabled: string;
                textColorGhost: string;
                textColorGhostHover: string;
                textColorGhostPressed: string;
                textColorGhostFocus: string;
                textColorGhostDisabled: string;
                border: string;
                borderHover: string;
                borderPressed: string;
                borderFocus: string;
                borderDisabled: string;
                rippleColor: string;
                colorPrimary: string;
                colorHoverPrimary: string;
                colorPressedPrimary: string;
                colorFocusPrimary: string;
                colorDisabledPrimary: string;
                textColorPrimary: string;
                textColorHoverPrimary: string;
                textColorPressedPrimary: string;
                textColorFocusPrimary: string;
                textColorDisabledPrimary: string;
                textColorTextPrimary: string;
                textColorTextHoverPrimary: string;
                textColorTextPressedPrimary: string;
                textColorTextFocusPrimary: string;
                textColorTextDisabledPrimary: string;
                textColorGhostPrimary: string;
                textColorGhostHoverPrimary: string;
                textColorGhostPressedPrimary: string;
                textColorGhostFocusPrimary: string;
                textColorGhostDisabledPrimary: string;
                borderPrimary: string;
                borderHoverPrimary: string;
                borderPressedPrimary: string;
                borderFocusPrimary: string;
                borderDisabledPrimary: string;
                rippleColorPrimary: string;
                colorInfo: string;
                colorHoverInfo: string;
                colorPressedInfo: string;
                colorFocusInfo: string;
                colorDisabledInfo: string;
                textColorInfo: string;
                textColorHoverInfo: string;
                textColorPressedInfo: string;
                textColorFocusInfo: string;
                textColorDisabledInfo: string;
                textColorTextInfo: string;
                textColorTextHoverInfo: string;
                textColorTextPressedInfo: string;
                textColorTextFocusInfo: string;
                textColorTextDisabledInfo: string;
                textColorGhostInfo: string;
                textColorGhostHoverInfo: string;
                textColorGhostPressedInfo: string;
                textColorGhostFocusInfo: string;
                textColorGhostDisabledInfo: string;
                borderInfo: string;
                borderHoverInfo: string;
                borderPressedInfo: string;
                borderFocusInfo: string;
                borderDisabledInfo: string;
                rippleColorInfo: string;
                colorSuccess: string;
                colorHoverSuccess: string;
                colorPressedSuccess: string;
                colorFocusSuccess: string;
                colorDisabledSuccess: string;
                textColorSuccess: string;
                textColorHoverSuccess: string;
                textColorPressedSuccess: string;
                textColorFocusSuccess: string;
                textColorDisabledSuccess: string;
                textColorTextSuccess: string;
                textColorTextHoverSuccess: string;
                textColorTextPressedSuccess: string;
                textColorTextFocusSuccess: string;
                textColorTextDisabledSuccess: string;
                textColorGhostSuccess: string;
                textColorGhostHoverSuccess: string;
                textColorGhostPressedSuccess: string;
                textColorGhostFocusSuccess: string;
                textColorGhostDisabledSuccess: string;
                borderSuccess: string;
                borderHoverSuccess: string;
                borderPressedSuccess: string;
                borderFocusSuccess: string;
                borderDisabledSuccess: string;
                rippleColorSuccess: string;
                colorWarning: string;
                colorHoverWarning: string;
                colorPressedWarning: string;
                colorFocusWarning: string;
                colorDisabledWarning: string;
                textColorWarning: string;
                textColorHoverWarning: string;
                textColorPressedWarning: string;
                textColorFocusWarning: string;
                textColorDisabledWarning: string;
                textColorTextWarning: string;
                textColorTextHoverWarning: string;
                textColorTextPressedWarning: string;
                textColorTextFocusWarning: string;
                textColorTextDisabledWarning: string;
                textColorGhostWarning: string;
                textColorGhostHoverWarning: string;
                textColorGhostPressedWarning: string;
                textColorGhostFocusWarning: string;
                textColorGhostDisabledWarning: string;
                borderWarning: string;
                borderHoverWarning: string;
                borderPressedWarning: string;
                borderFocusWarning: string;
                borderDisabledWarning: string;
                rippleColorWarning: string;
                colorError: string;
                colorHoverError: string;
                colorPressedError: string;
                colorFocusError: string;
                colorDisabledError: string;
                textColorError: string;
                textColorHoverError: string;
                textColorPressedError: string;
                textColorFocusError: string;
                textColorDisabledError: string;
                textColorTextError: string;
                textColorTextHoverError: string;
                textColorTextPressedError: string;
                textColorTextFocusError: string;
                textColorTextDisabledError: string;
                textColorGhostError: string;
                textColorGhostHoverError: string;
                textColorGhostPressedError: string;
                textColorGhostFocusError: string;
                textColorGhostDisabledError: string;
                borderError: string;
                borderHoverError: string;
                borderPressedError: string;
                borderFocusError: string;
                borderDisabledError: string;
                rippleColorError: string;
                waveOpacity: string;
                fontWeightText: string;
                fontWeight: string;
                fontWeighGhost: string;
                paddingTiny: string;
                paddingSmall: string;
                paddingMedium: string;
                paddingLarge: string;
                paddingRoundTiny: string;
                paddingRoundSmall: string;
                paddingRoundMedium: string;
                paddingRoundLarge: string;
                iconMarginTiny: string;
                iconMarginSmall: string;
                iconMarginMedium: string;
                iconMarginLarge: string;
                iconSizeTiny: string;
                iconSizeSmall: string;
                iconSizeMedium: string;
                iconSizeLarge: string;
                rippleDuration: string;
            }, any>;
            Input: import("../../_mixins").Theme<"Input", {
                countTextColor: string;
                heightTiny: string;
                heightSmall: string;
                heightMedium: string;
                heightLarge: string;
                fontSizeTiny: string;
                fontSizeSmall: string;
                fontSizeMedium: string;
                fontSizeLarge: string;
                lineHeight: string;
                lineHeightTextarea: string;
                borderRadius: string;
                iconSize: string;
                groupLabelColor: string;
                groupLabelTextColor: string;
                textColor: string;
                textColorDisabled: string;
                textDecorationColor: string;
                caretColor: string;
                placeholderColor: string;
                placeholderColorDisabled: string;
                color: string;
                colorDisabled: string;
                colorFocus: string;
                groupLabelBorder: string;
                border: string;
                borderHover: string;
                borderDisabled: string;
                borderFocus: string;
                boxShadowFocus: string;
                loadingColor: string;
                loadingColorWarning: string;
                borderWarning: string;
                borderHoverWarning: string;
                colorFocusWarning: string;
                borderFocusWarning: string;
                boxShadowFocusWarning: string;
                caretColorWarning: string;
                loadingColorError: string;
                borderError: string;
                borderHoverError: string;
                colorFocusError: string;
                borderFocusError: string;
                boxShadowFocusError: string;
                caretColorError: string;
                clearColor: string;
                clearColorHover: string;
                clearColorPressed: string;
                iconColor: string;
                iconColorDisabled: string;
                iconColorHover: string;
                iconColorPressed: string;
                suffixTextColor: string;
                paddingTiny: string;
                paddingSmall: string;
                paddingMedium: string;
                paddingLarge: string;
                clearSize: string;
            }, any>;
        };
        peerOverrides: {
            Scrollbar?: {
                peers?: {
                    [x: string]: any;
                } | undefined;
            } | undefined;
            Button?: {
                peers?: {
                    [x: string]: any;
                } | undefined;
            } | undefined;
            Input?: {
                peers?: {
                    [x: string]: any;
                } | undefined;
            } | undefined;
        };
    }>;
    mergedClsPrefix: import("vue").Ref<string>;
    hours: import("vue").ComputedRef<Item[]>;
    minutes: import("vue").ComputedRef<Item[]>;
    seconds: import("vue").ComputedRef<Item[]>;
    hourScrollRef: import("vue").Ref<null>;
    minuteScrollRef: import("vue").Ref<null>;
    secondScrollRef: import("vue").Ref<null>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    showHour?: unknown;
    showMinute?: unknown;
    showSecond?: unknown;
    showPeriod?: unknown;
    isHourInvalid?: unknown;
    isMinuteInvalid?: unknown;
    isSecondInvalid?: unknown;
    isValueInvalid?: unknown;
    hourValue?: unknown;
    minuteValue?: unknown;
    secondValue?: unknown;
    isHourDisabled?: unknown;
    isMinuteDisabled?: unknown;
    isSecondDisabled?: unknown;
    onHourClick?: unknown;
    onMinuteClick?: unknown;
    onSecondClick?: unknown;
    onNowClick?: unknown;
    nowText?: unknown;
    confirmText?: unknown;
    transitionDisabled?: unknown;
    onConfirmClick?: unknown;
    onFocusin?: unknown;
    onFocusout?: unknown;
    onFocusDetectorFocus?: unknown;
    onKeydown?: unknown;
} & {
    transitionDisabled: boolean;
    showHour: boolean;
    showMinute: boolean;
    showSecond: boolean;
    showPeriod: boolean;
    isHourInvalid: boolean;
    isMinuteInvalid: boolean;
    isSecondInvalid: boolean;
    isValueInvalid: boolean;
    hourValue: number | null;
    minuteValue: number | null;
    secondValue: number | null;
    onHourClick: (value: number) => void;
    onMinuteClick: (value: number) => void;
    onSecondClick: (value: number) => void;
} & {
    onFocusin?: ((e: FocusEvent) => void) | undefined;
    onFocusout?: ((e: FocusEvent) => void) | undefined;
    onKeydown?: ((e: KeyboardEvent) => void) | undefined;
    isHourDisabled?: IsHourDisabled | undefined;
    isMinuteDisabled?: IsMinuteDisabled | undefined;
    isSecondDisabled?: IsSecondDisabled | undefined;
    onNowClick?: (() => void) | undefined;
    nowText?: string | undefined;
    confirmText?: string | undefined;
    onConfirmClick?: (() => void) | undefined;
    onFocusDetectorFocus?: (() => void) | undefined;
}>, {
    transitionDisabled: boolean;
    showHour: boolean;
    showMinute: boolean;
    showSecond: boolean;
    showPeriod: boolean;
    isHourInvalid: boolean;
    isMinuteInvalid: boolean;
    isSecondInvalid: boolean;
    isValueInvalid: boolean;
    hourValue: number | null;
    minuteValue: number | null;
    secondValue: number | null;
}>;
export default _default;
