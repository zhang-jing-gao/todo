"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const vooks_1 = require("vooks");
const seemly_1 = require("seemly");
const icons_1 = require("../../_internal/icons");
const _internal_1 = require("../../_internal");
const button_1 = require("../../button");
const _mixins_1 = require("../../_mixins");
const cssr_1 = require("../../_utils/cssr");
const _utils_1 = require("../../_utils");
const styles_1 = require("../styles");
const TransferHeader_1 = require("./TransferHeader");
const TransferList_1 = require("./TransferList");
const TransferFilter_1 = require("./TransferFilter");
const use_transfer_data_1 = require("./use-transfer-data");
const index_cssr_1 = require("./styles/index.cssr");
const interface_1 = require("./interface");
const transferProps = Object.assign(Object.assign({}, _mixins_1.useTheme.props), { value: Array, defaultValue: {
        type: Array,
        default: null
    }, options: {
        type: Array,
        default: () => []
    }, disabled: {
        type: Boolean,
        default: false
    }, virtualScroll: {
        type: Boolean,
        default: false
    }, sourceTitle: String, targetTitle: String, filterable: {
        type: Boolean,
        default: false
    }, sourceFilterPlaceholder: String, targetFilterPlaceholder: String, filter: {
        type: Function,
        default: (pattern, option) => {
            if (!pattern)
                return true;
            return ~('' + option.label)
                .toLowerCase()
                .indexOf(('' + pattern).toLowerCase());
        }
    }, size: {
        type: String,
        default: undefined
    }, 
    // eslint-disable-next-line vue/prop-name-casing
    'onUpdate:value': [Function, Array], onUpdateValue: [Function, Array], onChange: {
        type: [Function, Array],
        validator: () => {
            if (process.env.NODE_ENV !== 'production') {
                _utils_1.warn('transfer', '`on-change` is deprecated, please use `on-update:value` instead.');
            }
            return true;
        },
        default: undefined
    } });
exports.default = vue_1.defineComponent({
    name: 'Transfer',
    props: transferProps,
    setup(props) {
        const { mergedClsPrefixRef } = _mixins_1.useConfig(props);
        const themeRef = _mixins_1.useTheme('Transfer', 'Transfer', index_cssr_1.default, styles_1.transferLight, props, mergedClsPrefixRef);
        const formItem = _mixins_1.useFormItem(props);
        const { mergedSizeRef } = formItem;
        const itemSizeRef = vue_1.computed(() => {
            const { value: size } = mergedSizeRef;
            const { self: { [cssr_1.createKey('itemHeight', size)]: itemSize } } = themeRef.value;
            return seemly_1.depx(itemSize);
        });
        const { uncontrolledValue: uncontrolledValueRef, mergedValue: mergedValueRef, avlSrcValueSet: avlSrcValueSetRef, avlTgtValueSet: avlTgtValueSetRef, tgtOpts: tgtOptsRef, srcOpts: srcOptsRef, filteredSrcOpts: filteredSrcOptsRef, filteredTgtOpts: filteredTgtOptsRef, srcCheckedValues: srcCheckedValuesRef, tgtCheckedValues: tgtCheckedValuesRef, srcCheckedStatus: srcCheckedStatusRef, tgtCheckedStatus: tgtCheckedStatusRef, srcPattern: srcPatternRef, tgtPattern: tgtPatternRef, isInputing: isInputingRef, fromButtonDisabled: fromButtonDisabledRef, toButtonDisabled: toButtonDisabledRef, handleInputFocus, handleInputBlur, handleTgtFilterUpdateValue, handleSrcFilterUpdateValue } = use_transfer_data_1.useTransferData(props);
        function doUpdateValue(value) {
            const { onUpdateValue, 'onUpdate:value': _onUpdateValue, onChange } = props;
            const { nTriggerFormInput, nTriggerFormChange } = formItem;
            if (onUpdateValue)
                _utils_1.call(onUpdateValue, value);
            if (_onUpdateValue)
                _utils_1.call(_onUpdateValue, value);
            if (onChange)
                _utils_1.call(onChange, value);
            uncontrolledValueRef.value = value;
            nTriggerFormInput();
            nTriggerFormChange();
        }
        function handleSrcHeaderCheck(value) {
            const { value: { checked, indeterminate } } = srcCheckedStatusRef;
            if (indeterminate || checked) {
                srcCheckedValuesRef.value = [];
            }
            else {
                srcCheckedValuesRef.value = Array.from(avlSrcValueSetRef.value);
            }
        }
        function handleTgtHeaderCheck() {
            const { value: { checked, indeterminate } } = tgtCheckedStatusRef;
            if (indeterminate || checked) {
                tgtCheckedValuesRef.value = [];
            }
            else {
                tgtCheckedValuesRef.value = Array.from(avlTgtValueSetRef.value);
            }
        }
        function handleTgtCheckboxClick(checked, optionValue) {
            if (checked) {
                tgtCheckedValuesRef.value.push(optionValue);
            }
            else {
                const index = tgtCheckedValuesRef.value.findIndex((v) => v === optionValue);
                if (~index) {
                    tgtCheckedValuesRef.value.splice(index, 1);
                }
            }
        }
        function handleSrcCheckboxClick(checked, optionValue) {
            if (checked) {
                srcCheckedValuesRef.value.push(optionValue);
            }
            else {
                const index = srcCheckedValuesRef.value.findIndex((v) => v === optionValue);
                if (~index) {
                    srcCheckedValuesRef.value.splice(index, 1);
                }
            }
        }
        function handleToTgtClick() {
            doUpdateValue(srcCheckedValuesRef.value.concat(mergedValueRef.value || []));
            srcCheckedValuesRef.value = [];
        }
        function handleToSrcClick() {
            const tgtCheckedValueSet = new Set(tgtCheckedValuesRef.value);
            doUpdateValue((mergedValueRef.value || []).filter((v) => !tgtCheckedValueSet.has(v)));
            tgtCheckedValuesRef.value = [];
        }
        vue_1.provide(interface_1.transferInjectionKey, {
            mergedClsPrefixRef,
            mergedSizeRef,
            disabledRef: vue_1.toRef(props, 'disabled'),
            mergedThemeRef: themeRef,
            srcCheckedValuesRef,
            tgtCheckedValuesRef,
            srcOptsRef,
            tgtOptsRef,
            srcCheckedStatusRef,
            tgtCheckedStatusRef,
            handleSrcCheckboxClick,
            handleTgtCheckboxClick
        });
        const { localeRef } = _mixins_1.useLocale('Transfer');
        return {
            locale: localeRef,
            mergedClsPrefix: mergedClsPrefixRef,
            itemSize: itemSizeRef,
            isMounted: vooks_1.useIsMounted(),
            isInputing: isInputingRef,
            mergedTheme: themeRef,
            filteredSrcOpts: filteredSrcOptsRef,
            filteredTgtOpts: filteredTgtOptsRef,
            srcPattern: srcPatternRef,
            tgtPattern: tgtPatternRef,
            toButtonDisabled: toButtonDisabledRef,
            fromButtonDisabled: fromButtonDisabledRef,
            handleSrcHeaderCheck,
            handleTgtHeaderCheck,
            handleToSrcClick,
            handleToTgtClick,
            handleInputFocus,
            handleInputBlur,
            handleTgtFilterUpdateValue,
            handleSrcFilterUpdateValue,
            cssVars: vue_1.computed(() => {
                const { value: size } = mergedSizeRef;
                const { common: { cubicBezierEaseInOut, cubicBezierEaseIn, cubicBezierEaseOut }, self: { width, borderRadius, borderColor, listColor, headerColor, titleTextColor, titleTextColorDisabled, extraTextColor, filterDividerColor, itemTextColor, itemColorPending, itemTextColorDisabled, extraFontSize, titleFontWeight, iconColor, iconColorDisabled, [cssr_1.createKey('fontSize', size)]: fontSize, [cssr_1.createKey('itemHeight', size)]: itemHeight } } = themeRef.value;
                return {
                    '--bezier': cubicBezierEaseInOut,
                    '--bezier-ease-in': cubicBezierEaseIn,
                    '--bezier-ease-out': cubicBezierEaseOut,
                    '--border-color': borderColor,
                    '--border-radius': borderRadius,
                    '--extra-font-size': extraFontSize,
                    '--filter-divider-color': filterDividerColor,
                    '--font-size': fontSize,
                    '--header-color': headerColor,
                    '--header-extra-text-color': extraTextColor,
                    '--header-font-weight': titleFontWeight,
                    '--header-text-color': titleTextColor,
                    '--header-text-color-disabled': titleTextColorDisabled,
                    '--item-color-pending': itemColorPending,
                    '--item-height': itemHeight,
                    '--item-text-color': itemTextColor,
                    '--item-text-color-disabled': itemTextColorDisabled,
                    '--list-color': listColor,
                    '--width': width,
                    '--icon-color': iconColor,
                    '--icon-color-disabled': iconColorDisabled
                };
            })
        };
    },
    render() {
        const { mergedClsPrefix } = this;
        return (vue_1.h("div", { class: [
                `${mergedClsPrefix}-transfer`,
                this.disabled && `${mergedClsPrefix}-transfer--disabled`,
                this.filterable && `${mergedClsPrefix}-transfer--filterable`
            ], style: this.cssVars },
            vue_1.h("div", { class: `${mergedClsPrefix}-transfer-list` },
                vue_1.h(TransferHeader_1.default, { source: true, onChange: this.handleSrcHeaderCheck, title: this.sourceTitle || this.locale.sourceTitle }),
                vue_1.h("div", { class: `${mergedClsPrefix}-transfer-list-body` },
                    this.filterable ? (vue_1.h(TransferFilter_1.default, { onUpdateValue: this.handleSrcFilterUpdateValue, value: this.srcPattern, disabled: this.disabled, placeholder: this.sourceFilterPlaceholder, onFocus: this.handleInputFocus, onBlur: this.handleInputBlur })) : null,
                    vue_1.h("div", { class: `${mergedClsPrefix}-transfer-list-flex-container` },
                        vue_1.h(TransferList_1.default, { source: true, options: this.filteredSrcOpts, disabled: this.disabled, virtualScroll: this.virtualScroll, isMounted: this.isMounted, isInputing: this.isInputing, itemSize: this.itemSize }))),
                vue_1.h("div", { class: `${mergedClsPrefix}-transfer-list__border` })),
            vue_1.h("div", { class: `${mergedClsPrefix}-transfer-gap` },
                vue_1.h(button_1.NButton, { disabled: this.toButtonDisabled || this.disabled, theme: this.mergedTheme.peers.Button, themeOverrides: this.mergedTheme.peerOverrides.Button, onClick: this.handleToTgtClick }, {
                    icon: () => (vue_1.h(_internal_1.NBaseIcon, { clsPrefix: mergedClsPrefix }, { default: () => vue_1.h(icons_1.ChevronRightIcon, null) }))
                }),
                vue_1.h(button_1.NButton, { disabled: this.fromButtonDisabled || this.disabled, theme: this.mergedTheme.peers.Button, themeOverrides: this.mergedTheme.peerOverrides.Button, onClick: this.handleToSrcClick }, {
                    icon: () => (vue_1.h(_internal_1.NBaseIcon, { clsPrefix: mergedClsPrefix }, { default: () => vue_1.h(icons_1.ChevronLeftIcon, null) }))
                })),
            vue_1.h("div", { class: `${mergedClsPrefix}-transfer-list` },
                vue_1.h(TransferHeader_1.default, { onChange: this.handleTgtHeaderCheck, title: this.targetTitle || this.locale.targetTitle }),
                vue_1.h("div", { class: `${mergedClsPrefix}-transfer-list-body` },
                    this.filterable ? (vue_1.h(TransferFilter_1.default, { onUpdateValue: this.handleTgtFilterUpdateValue, value: this.tgtPattern, disabled: this.disabled, placeholder: this.targetFilterPlaceholder, onFocus: this.handleInputFocus, onBlur: this.handleInputBlur })) : null,
                    vue_1.h("div", { class: `${mergedClsPrefix}-transfer-list-flex-container` },
                        vue_1.h(TransferList_1.default, { options: this.filteredTgtOpts, disabled: this.disabled, virtualScroll: this.virtualScroll, isMounted: this.isMounted, isInputing: this.isInputing, itemSize: this.itemSize }))),
                vue_1.h("div", { class: `${mergedClsPrefix}-transfer-list__border` }))));
    }
});
