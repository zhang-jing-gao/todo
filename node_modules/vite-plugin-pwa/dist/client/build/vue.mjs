// src/client/build/vue.ts
import {ref} from "vue";

// src/client/build/register.ts
import {Workbox, messageSW} from "workbox-window";
var autoUpdateMode = "__SW_AUTO_UPDATE__";
var auto = autoUpdateMode === "true";
function registerSW(options = {}) {
  const {
    immediate = false,
    onNeedRefresh,
    onOfflineReady
  } = options;
  let wb;
  let registration;
  const updateServiceWorker = async (reloadPage = true) => {
    if (!auto) {
      if (reloadPage) {
        wb == null ? void 0 : wb.addEventListener("controlling", (event) => {
          if (event.isUpdate)
            window.location.reload();
        });
      }
      if (registration && registration.waiting) {
        await messageSW(registration.waiting, {type: "SKIP_WAITING"});
      }
    }
  };
  if ("serviceWorker" in navigator) {
    wb = new Workbox("__SW__", {scope: "__SCOPE__"});
    wb.addEventListener("activated", (event) => {
      if (event.isUpdate)
        auto && window.location.reload();
      else
        onOfflineReady == null ? void 0 : onOfflineReady();
    });
    if (!auto) {
      const showSkipWaitingPrompt = () => {
        onNeedRefresh == null ? void 0 : onNeedRefresh();
      };
      wb.addEventListener("waiting", showSkipWaitingPrompt);
      wb.addEventListener("externalwaiting", showSkipWaitingPrompt);
    }
    wb.register({immediate}).then((r) => registration = r);
  }
  return updateServiceWorker;
}

// src/client/build/vue.ts
function useRegisterSW(options = {}) {
  const {
    immediate = true,
    onNeedRefresh,
    onOfflineReady
  } = options;
  const needRefresh = ref(false);
  const offlineReady = ref(false);
  const updateServiceWorker = registerSW({
    immediate,
    onNeedRefresh() {
      needRefresh.value = true;
      onNeedRefresh == null ? void 0 : onNeedRefresh();
    },
    onOfflineReady() {
      offlineReady.value = true;
      onOfflineReady == null ? void 0 : onOfflineReady();
    }
  });
  return {
    updateServiceWorker,
    offlineReady,
    needRefresh
  };
}
export {
  useRegisterSW
};
