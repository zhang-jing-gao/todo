var _a, _b;
import { onMounted, onBeforeUnmount } from 'vue';
import { isBrowser } from './utils';
const fontsReady = isBrowser ? (_b = (_a = document) === null || _a === void 0 ? void 0 : _a.fonts) === null || _b === void 0 ? void 0 : _b.ready : undefined;
let isFontReady = false;
/* istanbul ignore if */
if (fontsReady !== undefined) {
    fontsReady.then(() => {
        isFontReady = true;
    });
}
else {
    isFontReady = true;
}
/**
 * Call callback on fontsReady is resolved. If fontsReady is already resolved,
 * callback won't be called.
 */
export default function onFontsReady(cb) {
    var _a, _b;
    /* istanbul ignore next */
    if (process.env.NODE_ENV !== 'test' && isFontReady)
        return;
    if (process.env.NODE_ENV === 'test' &&
        // dynamic resolving here, since in we may change it in test environment
        ((_b = (_a = document) === null || _a === void 0 ? void 0 : _a.fonts) === null || _b === void 0 ? void 0 : _b.ready) === undefined) {
        return;
    }
    let deactivated = false;
    onMounted(() => {
        var _a, _b;
        /* istanbul ignore next */
        if (!isFontReady) {
            fontsReady.then(() => {
                if (deactivated)
                    return;
                cb();
            });
        }
        /* istanbul ignore else */
        if (process.env.NODE_ENV === 'test') {
            ;
            (_b = (_a = document) === null || _a === void 0 ? void 0 : _a.fonts) === null || _b === void 0 ? void 0 : _b.ready.then(() => {
                if (deactivated)
                    return;
                cb();
            });
        }
    });
    onBeforeUnmount(() => {
        deactivated = true;
    });
}
