import { ref, readonly, onBeforeMount, onBeforeUnmount } from 'vue';
import { on, off } from 'evtd';
import { hasInstance, isBrowser } from './utils';
const mousePositionRef = ref(null);
function clickHandler(e) {
    mousePositionRef.value = {
        x: e.clientX,
        y: e.clientY
    };
}
let usedCount = 0;
let managable = true;
export default function useClickPosition() {
    if (!isBrowser)
        return readonly(ref(null));
    if (usedCount === 0)
        on('click', window, clickHandler, true);
    const setup = () => {
        usedCount += 1;
    };
    if (managable && (managable = hasInstance())) {
        onBeforeMount(setup);
        onBeforeUnmount(() => {
            usedCount -= 1;
            if (usedCount === 0)
                off('click', window, clickHandler, true);
        });
    }
    else {
        setup();
    }
    return readonly(mousePositionRef);
}
